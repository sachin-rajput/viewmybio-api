var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.497,1,2.023]],["body/controllers/AppController.html",[0,2.458,1,2.701,2,1.454,3,0.309,4,0.268,5,0.297,6,2.555,7,0.875,8,3.086,9,0.399,10,1.535,11,4.214,12,4.88,13,3.067,14,1.826,15,0.034,16,3.067,17,3.323,18,3.599,19,4.677,20,4.486,21,3.511,22,3.749,23,3.323,24,0.831,25,3.067,26,2.195,27,1.117,28,0.605,29,1.026,30,5.434,31,2.425,32,1.452,33,4.815,34,4.214,35,3.048,36,1.09,37,3.067,38,3.067,39,2.983,40,2.195,41,2.425,42,1.042,43,2.425,44,2.195,45,0.452,46,2.555,47,0.727,48,2.83,49,2.555,50,3.511,51,3.929,52,1.454,53,2.555,54,1.598,55,0.309,56,0.016,57,0.865,58,1.189,59,1.117,60,2.555,61,1.026,62,3.511,63,2.246,64,2.425,65,0.998,66,3.067,67,3.067,68,3.067,69,3.067,70,0.016,71,0.022,72,0.016]],["title/modules/AppModule.html",[36,0.817,73,1.816]],["body/modules/AppModule.html",[1,2.963,2,1.894,3,0.466,4,0.248,5,0.246,15,0.034,18,2.561,36,1.034,45,0.532,47,0.673,48,2.855,49,2.367,55,0.287,56,0.015,59,1.826,65,0.946,70,0.015,71,0.021,72,0.015,73,3.529,74,1.231,75,1.731,76,2.367,77,2.367,78,2.367,79,3.154,80,2.994,81,2.855,82,3.041,83,2.299,84,1.635,85,1.48,86,2.841,87,2.081,88,3.215,89,2.191,90,3.996,91,2.367,92,2.367,93,2.367,94,3.996,95,1.635,96,2.841,97,2.367,98,1.588,99,1.48,100,2.841,101,2.367,102,2.841,103,2.841,104,1.821,105,1.821,106,1.821,107,1.127,108,2.367,109,2.841,110,2.299,111,2.561,112,0.369,113,2.841,114,2.841,115,2.841,116,2.367,117,2.841,118,0.95,119,2.841,120,0.95,121,2.841,122,1.231,123,2.841,124,2.841,125,2.841,126,2.841,127,2.841,128,3.996,129,2.841,130,2.299,131,2.841,132,4.622,133,3.627,134,3.996,135,3.996,136,3.996,137,1.414,138,3.996,139,3.996,140,2.841,141,3.996,142,2.841,143,2.054,144,2.841,145,2.841,146,2.841,147,2.841,148,2.841,149,2.841,150,2.841,151,2.841,152,2.841,153,2.841,154,2.841,155,2.841]],["title/injectables/AppService.html",[48,1.644,156,1.056]],["body/injectables/AppService.html",[3,0.361,4,0.312,5,0.321,7,0.68,9,0.465,10,1.701,12,4.596,15,0.034,24,0.922,26,2.434,27,1.303,28,0.706,29,1.196,32,1.209,39,2.689,40,2.434,41,2.994,42,1.126,43,3.174,44,2.434,45,0.454,47,0.847,48,2.434,55,0.361,56,0.018,57,1.556,58,1.318,59,2.137,61,1.563,65,0.847,70,0.018,71,0.024,72,0.018,89,1.696,98,1.614,99,1.863,110,2.059,112,0.465,156,1.563,157,2.059,158,2.981,159,3.578,160,3.931,161,3.578,162,2.615,163,3.893,164,3.578,165,3.893,166,3.335,167,1.854,168,3.578,169,1.099,170,5.203,171,3.578,172,3.578]],["title/controllers/AuthController.html",[0,1.497,173,2.023]],["body/controllers/AuthController.html",[0,2.177,2,1.331,3,0.283,4,0.245,5,0.173,7,0.896,9,0.365,10,1.443,14,1.716,15,0.034,20,2.865,21,3.301,22,3.607,24,0.781,27,1.443,28,0.781,29,1.325,31,1.615,32,1.025,45,0.476,47,0.665,51,4.058,52,1.331,55,0.283,56,0.014,57,1.117,58,1.407,59,1.443,61,1.325,63,2.365,64,2.28,65,0.939,70,0.014,71,0.02,72,0.014,112,0.515,167,1.572,169,1.217,173,2.54,174,2.339,175,2.339,176,2.807,177,3.372,178,2.167,179,3.674,180,4.156,181,2.807,182,2.74,183,2.807,184,4.989,185,4.989,186,3.962,187,4.989,188,4.989,189,2.807,190,3.607,191,2.54,192,2.54,193,3.301,194,3.962,195,2.167,196,3.607,197,1.716,198,2.807,199,2.494,200,2.807,201,4.989,202,2.807,203,2.807,204,2.807,205,2.339,206,2.494,207,1.615,208,2.339,209,2.03,210,2.807,211,1.759,212,1.799,213,2.807,214,2.807,215,1.411,216,2.807,217,2.807,218,2.365,219,2.807,220,3.962,221,2.807,222,2.807,223,2.807]],["title/modules/AuthModule.html",[36,0.817,79,1.816]],["body/modules/AuthModule.html",[2,2.175,3,0.351,4,0.304,5,0.214,15,0.034,36,1.187,45,0.532,47,0.824,54,1.813,55,0.351,56,0.018,65,0.824,70,0.018,71,0.024,72,0.018,74,1.507,75,1.988,79,3.594,80,3.094,81,3.034,83,2.64,84,2.003,85,1.813,87,2.39,88,3.29,97,2.899,98,1.539,99,1.813,101,2.899,110,2.003,111,2.231,173,3.29,178,1.381,206,2.762,208,2.899,224,2.899,225,3.48,226,2.899,227,3.352,228,3.48,229,3.48,230,2.899,231,3.48,232,2.231,233,3.48,234,4.588,235,4.588,236,2.64,237,3.48,238,2.899,239,2.899,240,3.48,241,4.588,242,3.48,243,2.003,244,2.231]],["title/injectables/AuthService.html",[156,1.056,206,1.497]],["body/injectables/AuthService.html",[3,0.209,4,0.181,5,0.128,7,0.462,9,0.27,10,1.155,15,0.034,18,2.469,24,0.916,27,1.57,28,0.966,29,1.442,31,2.216,32,1.267,42,1.243,45,0.428,47,0.492,55,0.32,56,0.011,57,1.216,58,1.483,59,1.914,61,1.638,65,1.022,70,0.011,71,0.016,72,0.011,98,1.52,99,1.081,112,0.637,118,1.442,120,1.061,122,1.374,133,2.785,137,0.585,156,1.061,157,1.194,162,1.504,167,2.138,169,1.427,177,2.033,178,1.944,179,1.33,182,2.42,190,1.5,195,1.528,196,1.5,197,2.122,206,1.504,207,1.194,209,1.5,211,1.802,212,1.33,215,1.718,218,0.984,232,1.33,236,2.482,245,1.5,246,1.155,247,3.208,248,3.208,249,2.006,250,3.172,251,3.208,252,2.075,253,4.38,254,3.172,255,2.075,256,2.075,257,2.294,258,2.294,259,3.218,260,2.294,261,2.643,262,2.643,263,2.075,264,2.643,265,3.802,266,3.976,267,3.208,268,3.208,269,2.643,270,2.075,271,2.075,272,2.643,273,1.504,274,2.033,275,2.643,276,2.785,277,2.294,278,1.5,279,1.33,280,1.33,281,1.729,282,0.637,283,3.208,284,2.643,285,1.5,286,2.643,287,1.729,288,1.5,289,1.504,290,1.825,291,1.729,292,1.729,293,1.729,294,1.729,295,3.36,296,1.729,297,3.208,298,3.36,299,2.643,300,2.294,301,3.208,302,2.216,303,1.729,304,1.5,305,1.729,306,2.643,307,1.729,308,0.984,309,1.194,310,1.33,311,1.729]],["title/modules/ConfigModule.html",[36,0.817,80,1.644]],["body/modules/ConfigModule.html",[3,0.442,4,0.383,5,0.27,15,0.033,36,1.373,45,0.463,47,1.038,55,0.442,56,0.023,70,0.023,71,0.027,72,0.023,74,1.899,75,2.3,80,3.167,83,3.055,84,2.522,85,2.283,87,2.283,98,1.779,137,1.236,244,3.404,312,3.652,313,3.652,314,4.383,315,4.383,316,3.652,317,4.383,318,4.383]],["title/classes/ConfigService.html",[56,0.016,98,0.89]],["body/classes/ConfigService.html",[3,0.237,4,0.205,5,0.336,7,0.507,9,0.305,10,1.268,15,0.034,24,0.967,26,1.814,27,1.672,28,0.905,29,1.535,32,1.412,39,3.353,40,1.814,41,2.388,42,1.327,43,2.642,45,0.362,55,0.351,56,0.012,57,1.171,58,1.295,59,1.268,61,1.388,63,1.018,65,0.983,70,0.012,71,0.018,72,0.012,98,0.982,112,0.637,137,0.662,143,3.001,162,2.729,166,1.506,167,2.038,169,1.275,191,1.506,246,1.268,249,2.162,273,2.176,282,0.722,308,1.114,319,1.018,320,1.699,321,3.889,322,3.483,323,3.483,324,2.901,325,3.483,326,2.901,327,3.499,328,2.901,329,2.901,330,2.955,331,2.901,332,2.349,333,3.141,334,2.901,335,2.642,336,1.814,337,2.901,338,2.349,339,2.518,340,3.32,341,2.943,342,2.901,343,3.001,344,3.458,345,2.901,346,2.349,347,2.901,348,2.518,349,3.824,350,2.901,351,2.901,352,2.901,353,1.647,354,2.901,355,1.957,356,1.699,357,3.458,358,1.699,359,2.901,360,1.699,361,1.957,362,1.957,363,1.957,364,1.957,365,1.699,366,1.957,367,1.957,368,1.957,369,1.699,370,1.957,371,1.699,372,1.223,373,1.957,374,1.957,375,1.957,376,1.699,377,1.957,378,1.699,379,1.957,380,1.699,381,1.957,382,1.699,383,1.957,384,1.699,385,1.957,386,1.699,387,1.957,388,1.699,389,1.957,390,1.699,391,1.957,392,1.699,393,2.518,394,1.957,395,2.901,396,1.957,397,1.957,398,1.957,399,1.957,400,1.957]],["title/interfaces/EnvConfig.html",[282,0.97,321,2.023]],["body/interfaces/EnvConfig.html",[3,0.287,4,0.248,5,0.326,7,0.414,15,0.034,24,0.561,26,1.482,32,1.298,39,3.156,40,1.482,41,2.302,42,1.328,43,2.302,45,0.404,55,0.404,56,0.015,57,0.803,58,1.415,59,1.036,61,0.952,63,1.233,65,1.096,70,0.015,71,0.021,72,0.015,98,0.803,137,0.803,143,3.345,162,2.6,166,1.824,167,1.588,169,1.421,191,1.824,249,1.482,273,1.897,282,0.874,308,1.349,320,2.058,321,3.839,324,2.371,326,2.371,327,3.217,328,2.371,329,2.371,330,2.662,331,2.371,333,3.242,334,2.371,335,2.888,336,1.482,337,2.371,339,2.058,340,2.893,341,2.564,342,2.371,343,2.893,344,3.333,345,2.371,347,2.371,348,2.058,349,3.333,350,2.371,351,2.371,352,2.371,353,1.588,354,2.371,355,2.371,356,2.058,357,3.854,358,2.058,359,3.333,360,2.893,361,2.371,362,2.371,363,2.371,364,2.371,365,2.058,366,2.371,367,2.371,368,2.371,369,2.058,370,2.371,371,2.058,372,1.482,373,2.371,374,2.371,375,2.371,376,2.058,377,2.371,378,2.058,379,2.371,380,2.058,381,2.371,382,2.058,383,2.371,384,2.058,385,2.371,386,2.058,387,2.371,388,2.058,389,2.371,390,2.058,391,2.371,392,2.058,393,2.893,394,2.371,395,3.333,396,2.371,397,2.371,398,2.371,399,2.371,400,2.371,401,1.638,402,2.846,403,2.846]],["title/interfaces/IGenericMessageBody.html",[282,0.97,404,1.816]],["body/interfaces/IGenericMessageBody.html",[3,0.22,4,0.19,5,0.134,7,0.317,9,0.283,15,0.034,17,1.397,23,1.397,24,0.43,26,2.067,28,0.43,32,1.292,42,1.225,44,1.135,45,0.477,47,0.516,55,0.332,56,0.011,57,0.928,58,1.541,59,0.793,61,1.101,63,1.426,64,1.254,65,1.264,70,0.011,71,0.017,72,0.011,95,1.254,107,2.118,112,0.283,118,1.991,120,1.67,122,1.426,137,1.247,156,1.101,167,1.306,169,1.458,178,1.575,192,1.397,195,1.884,197,2.484,199,2.096,211,0.729,215,1.881,218,2.096,243,1.894,246,1.199,273,1.033,274,1.397,279,2.11,280,2.11,282,0.669,289,1.033,302,1.254,308,1.881,309,1.894,310,1.397,333,1.894,336,1.135,353,0.865,401,1.254,404,1.894,405,1.576,406,2.743,407,2.743,408,3.306,409,4.319,410,2.11,411,1.397,412,2.869,413,2.743,414,1.815,415,3.955,416,1.033,417,1.397,418,1.815,419,1.397,420,2.067,421,1.576,422,2.743,423,2.743,424,1.815,425,1.815,426,1.397,427,3.611,428,2.869,429,1.815,430,1.815,431,1.815,432,1.815,433,1.815,434,1.815,435,1.815,436,1.815,437,1.815,438,1.815,439,1.815,440,1.815,441,1.815,442,2.381,443,1.815,444,1.815,445,1.815,446,2.11,447,1.815,448,1.815,449,1.815,450,1.815,451,1.815,452,1.576,453,2.381,454,1.254,455,1.815,456,1.815,457,1.397,458,1.576,459,1.815,460,1.815,461,1.815,462,1.576,463,1.815,464,1.815,465,1.815,466,1.815,467,1.815,468,1.815,469,1.576,470,1.815,471,1.576,472,1.576,473,1.815,474,1.815,475,1.815,476,1.815,477,1.815,478,1.815,479,1.815,480,1.815,481,1.576,482,2.544,483,1.576,484,2.381,485,1.815,486,1.815,487,1.815]],["title/interfaces/ITokenReturnBody.html",[207,1.816,282,0.97]],["body/interfaces/ITokenReturnBody.html",[3,0.236,4,0.204,5,0.144,7,0.34,9,0.304,15,0.034,18,2.652,28,0.684,31,2.38,32,1.07,42,1.295,45,0.447,47,0.553,55,0.35,56,0.012,57,0.978,58,1.537,59,1.667,61,1.531,65,1.159,70,0.012,71,0.018,72,0.012,98,1.379,99,1.217,112,0.595,118,1.531,120,1.16,122,1.012,133,2.991,137,0.659,156,1.16,162,1.107,167,1.941,169,1.502,177,1.497,178,1.376,179,1.497,182,2.155,190,2.508,195,1.376,196,1.689,197,1.983,206,1.107,207,1.996,209,1.689,211,1.636,212,1.497,215,1.574,218,1.107,232,1.497,236,1.996,245,1.689,246,1.263,247,1.946,248,1.946,249,1.217,251,1.946,253,4.075,257,1.689,258,1.689,259,3.384,260,1.689,261,1.946,262,1.946,264,1.946,265,3.31,266,4.026,267,3.446,268,3.446,269,1.946,272,1.946,273,1.107,274,1.497,275,1.946,276,2.991,277,2.508,278,1.689,279,2.223,280,2.223,281,2.889,282,0.717,283,4.42,284,4.075,285,2.508,286,2.889,287,1.946,288,1.689,289,1.644,290,1.996,291,1.946,292,1.946,293,1.946,294,1.946,295,3.537,296,1.946,297,3.446,298,3.537,299,2.889,300,2.508,301,3.446,302,2.38,303,1.946,304,1.689,305,1.946,306,2.889,307,1.946,308,1.107,309,1.344,310,1.497,311,1.946,401,1.344]],["title/injectables/JwtStrategy.html",[156,1.056,227,1.816]],["body/injectables/JwtStrategy.html",[3,0.342,4,0.296,5,0.209,7,0.494,9,0.441,10,1.643,15,0.034,24,0.89,27,1.643,28,0.89,29,1.509,32,1.167,35,2.455,45,0.491,47,0.804,54,1.768,55,0.342,56,0.026,57,1.524,58,1.43,61,1.509,70,0.017,71,0.023,72,0.017,98,1.691,99,1.768,112,0.587,156,1.509,157,1.953,167,1.347,169,1.043,178,2.012,191,3.25,197,2.196,211,2.03,212,2.176,227,2.597,236,3.11,239,2.828,258,3.264,259,3.237,277,2.455,285,3.264,289,1.609,327,2.893,339,3.264,393,2.455,488,2.828,489,5.07,490,3.394,491,3.394,492,3.394,493,3.394,494,4.513,495,3.394,496,3.394,497,2.828,498,3.394,499,3.394,500,3.394,501,3.394,502,3.394,503,3.394,504,3.394,505,3.394,506,2.828,507,4.513,508,4.513,509,4.513,510,3.394]],["title/classes/LoginPayload.html",[56,0.016,182,1.644]],["body/classes/LoginPayload.html",[3,0.403,4,0.348,5,0.246,7,0.581,9,0.519,14,2.171,15,0.034,24,0.988,42,1.244,45,0.437,52,1.893,55,0.403,56,0.03,70,0.021,71,0.026,72,0.021,112,0.651,118,1.98,120,1.98,130,2.884,179,3.213,182,2.611,195,1.989,246,1.825,319,1.729,372,2.611,511,3.326,512,3.624,513,3.326,514,3.992,515,4.155,516,2.887,517,3.992,518,3.962,519,3.624,520,3.962,521,2.887,522,2.559,523,2.887]],["title/classes/PasswordTransformer.html",[56,0.016,524,2.023]],["body/classes/PasswordTransformer.html",[3,0.392,4,0.339,5,0.24,7,0.788,9,0.505,10,1.795,15,0.034,24,0.972,27,1.795,28,0.972,29,1.649,32,1.275,42,1.232,45,0.43,55,0.392,56,0.028,58,1.39,65,1.348,70,0.02,71,0.025,72,0.02,120,1.649,319,1.685,335,3.583,410,3.16,416,1.844,442,2.812,524,3.16,525,3.24,526,3.565,527,4.93,528,5.413,529,4.93,530,3.889,531,4.93,532,4.742,533,4.93,534,3.889,535,4.93,536,3.889]],["title/classes/PatchProfilePayload.html",[56,0.016,420,1.644]],["body/classes/PatchProfilePayload.html",[3,0.359,4,0.311,5,0.22,7,0.518,9,0.463,14,2.386,15,0.034,24,1.086,28,1.127,42,1.311,45,0.407,52,1.689,55,0.359,56,0.028,70,0.018,71,0.024,72,0.018,112,0.716,118,1.911,120,1.911,130,2.05,195,1.849,215,1.431,246,1.697,290,3.289,319,1.543,341,2.284,372,1.855,420,2.427,512,2.576,515,4.381,516,2.576,518,4.133,519,3.369,520,4.24,521,2.576,522,2.284,523,2.576,537,2.968,538,3.882,539,3.562,540,3.562,541,3.562,542,3.882,543,3.882,544,3.562,545,3.562,546,3.562,547,3.562,548,3.882,549,2.968]],["title/classes/Profile.html",[56,0.016,215,0.97]],["body/classes/Profile.html",[3,0.294,4,0.254,5,0.18,7,0.424,9,0.379,14,2.457,15,0.034,24,1.119,28,1.119,42,1.289,44,2.12,45,0.443,55,0.294,56,0.026,70,0.015,71,0.021,72,0.015,107,2.333,112,0.737,118,1.784,120,1.784,122,1.763,130,2.342,137,0.822,215,1.558,243,2.342,246,1.482,289,2.222,290,3.07,319,1.263,411,2.608,416,1.382,419,1.869,426,2.608,454,2.342,462,3.858,524,3.252,526,3.39,532,3.39,550,2.429,551,4.604,552,5.307,553,2.916,554,2.916,555,3.905,556,2.916,557,2.916,558,2.916,559,4.069,560,4.069,561,2.916,562,2.916,563,4.069,564,4.069,565,4.069,566,4.069,567,2.916,568,2.429,569,2.916,570,3.39,571,3.39,572,3.39,573,2.916,574,2.916,575,4.069,576,2.916,577,2.916,578,2.109,579,2.916,580,2.916,581,2.429,582,2.916]],["title/controllers/ProfileController.html",[0,1.497,583,2.023]],["body/controllers/ProfileController.html",[0,1.943,2,1.09,3,0.232,4,0.201,5,0.142,7,0.868,9,0.299,10,1.248,14,1.776,15,0.034,17,3.266,20,4.195,22,3.685,23,3.266,24,0.808,27,1.493,28,0.808,29,1.371,31,1.323,32,1.318,42,1.143,45,0.461,46,1.916,47,0.545,50,2.856,51,3.817,52,1.09,53,1.916,54,1.198,55,0.232,56,0.012,57,0.649,58,1.37,60,1.916,61,0.769,62,3.415,63,2.207,65,0.971,70,0.012,71,0.018,72,0.012,104,1.474,105,1.474,106,1.474,112,0.533,118,1.916,122,1.485,137,0.649,169,0.706,175,1.916,178,2.201,195,1.627,197,2.402,199,1.09,205,1.916,211,1.519,215,1.954,218,1.943,273,1.625,308,1.09,336,1.786,404,1.323,412,2.479,417,1.474,420,2.366,421,1.663,427,3.286,428,2.479,471,2.479,472,2.479,482,3.618,483,1.663,484,2.479,538,4.245,578,3.286,583,2.198,584,1.916,585,2.3,586,3.429,587,3.429,588,2.3,589,2.3,590,4.543,591,4.543,592,3.429,593,4.099,594,2.3,595,3.429,596,3.429,597,2.3,598,2.3,599,5.096,600,2.3,601,3.429,602,3.429,603,2.3,604,2.3,605,3.429,606,2.3,607,3.429,608,4.099,609,1.916,610,2.3,611,2.3,612,2.3,613,4.099,614,2.3,615,2.3,616,1.916,617,3.429,618,2.3,619,2.3,620,2.3,621,2.3,622,2.3]],["title/modules/ProfileModule.html",[36,0.817,81,1.644]],["body/modules/ProfileModule.html",[2,2.391,3,0.407,4,0.352,5,0.248,15,0.034,36,1.304,45,0.536,47,0.955,54,2.1,55,0.407,56,0.021,70,0.021,71,0.026,72,0.021,74,1.746,75,2.184,81,3.2,83,2.902,84,2.32,85,2.1,87,2.627,88,2.584,93,3.358,95,2.32,107,2.001,211,2.132,215,1.238,230,3.358,244,3.232,417,2.584,419,2.584,583,3.528,609,3.358,623,3.358,624,3.358,625,3.358,626,4.031,627,4.031,628,4.031]],["title/injectables/ProfileService.html",[156,1.056,211,1.056]],["body/injectables/ProfileService.html",[3,0.183,4,0.158,5,0.112,7,0.415,9,0.235,10,1.04,15,0.034,17,1.161,23,1.161,24,0.991,26,2.414,27,1.766,28,0.991,29,1.622,32,1.42,42,1.256,44,0.944,45,0.451,47,0.429,55,0.288,56,0.009,57,1.131,58,1.458,59,1.04,61,0.955,63,0.785,64,1.643,65,1.149,70,0.009,71,0.015,72,0.009,95,1.042,107,1.995,112,0.63,118,2.004,120,1.729,122,1.737,137,1.131,156,0.955,157,1.042,167,1.133,169,1.34,178,2.052,192,2.57,195,1.995,197,2.534,199,2.299,211,0.955,215,1.915,218,1.901,243,2.307,273,1.353,274,1.161,279,1.161,280,1.161,282,0.556,289,1.353,302,1.042,308,1.675,309,1.643,310,1.161,333,1.643,336,1.487,353,0.719,404,1.042,405,1.31,406,1.509,407,1.509,408,2.943,409,2.943,410,1.83,411,1.161,412,2.555,413,2.378,414,1.509,415,4.308,416,0.859,417,1.161,418,1.509,419,1.161,420,2.272,421,1.31,422,2.943,423,3.34,424,1.509,425,1.509,426,1.83,427,3.97,428,3.351,429,2.378,430,1.509,431,1.509,432,2.378,433,1.509,434,2.378,435,2.378,436,1.509,437,1.509,438,1.509,439,1.509,440,1.509,441,1.509,442,2.064,443,1.509,444,1.509,445,2.378,446,2.265,447,2.378,448,1.509,449,1.509,450,1.509,451,1.509,452,1.31,453,2.064,454,1.042,455,1.509,456,1.509,457,1.161,458,1.31,459,1.509,460,1.509,461,1.509,462,1.31,463,1.509,464,1.509,465,1.509,466,1.509,467,1.509,468,1.509,469,1.31,470,1.509,471,2.899,472,2.064,473,2.378,474,1.509,475,1.509,476,1.509,477,1.509,478,1.509,479,1.509,480,1.509,481,1.31,482,3.109,483,2.064,484,2.064,485,1.509,486,1.509,487,1.509,629,2.855,630,2.855,631,1.812,632,1.812,633,1.812,634,1.812,635,1.812,636,1.812,637,1.812,638,1.812]],["title/classes/RegisterPayload.html",[56,0.016,199,1.497]],["body/classes/RegisterPayload.html",[3,0.352,4,0.304,5,0.215,7,0.507,9,0.453,14,2.366,15,0.034,24,1.077,28,1.119,42,1.305,45,0.401,52,1.653,55,0.352,56,0.028,70,0.018,71,0.024,72,0.018,112,0.71,118,1.898,120,1.898,130,3.143,180,3.828,195,1.823,199,2.178,246,1.673,290,3.266,319,1.511,341,2.235,372,2.845,512,3.95,513,2.905,515,4.361,516,2.522,518,4.105,519,3.323,520,4.215,521,2.522,522,2.235,523,2.522,542,3.828,543,3.828,548,3.828,549,2.905,639,2.905,640,3.487,641,3.487,642,3.487,643,3.487,644,3.487,645,3.487]],["title/classes/Roles.html",[56,0.016,107,1.253]],["body/classes/Roles.html",[3,0.344,4,0.297,5,0.21,7,0.496,8,2.901,9,0.443,14,2.201,15,0.034,24,1.002,45,0.443,55,0.344,56,0.026,70,0.018,71,0.023,72,0.018,105,2.901,107,2.148,108,2.839,112,0.703,215,1.913,243,2.604,246,1.648,260,3.273,278,2.465,289,2.409,319,1.476,353,2.148,416,1.616,426,2.901,446,2.901,454,2.604,457,3.611,458,3.914,482,2.901,551,4.825,552,4.999,555,4.233,568,3.77,570,3.77,571,3.77,572,3.77,578,3.273,581,4.923,646,2.839,647,3.408,648,3.408,649,4.526,650,4.526,651,3.408,652,3.408,653,3.408,654,4.526,655,4.526,656,3.408,657,3.408,658,3.408,659,3.408]],["title/modules/WinstonModule.html",[36,0.817,82,1.816]],["body/modules/WinstonModule.html",[3,0.359,4,0.311,5,0.22,10,1.297,15,0.034,24,0.919,27,1.697,28,0.919,29,1.558,32,1.205,36,1.585,45,0.453,47,0.844,55,0.359,56,0.018,57,1.553,58,1.314,65,1.104,70,0.018,71,0.024,72,0.018,74,1.543,82,3.169,87,3.054,88,2.284,89,2.462,112,0.605,169,1.431,244,2.987,249,2.868,392,2.576,660,3.562,661,3.562,662,4.659,663,3.53,664,3.562,665,4.659,666,3.289,667,5.715,668,4.659,669,3.562,670,3.169,671,3.562,672,3.882,673,4.659,674,3.562,675,2.576,676,2.576,677,3.562,678,4.659,679,3.562,680,3.562,681,3.562]],["title/interfaces/WinstonModuleAsyncOptions.html",[282,0.97,670,1.816]],["body/interfaces/WinstonModuleAsyncOptions.html",[3,0.395,4,0.342,5,0.241,7,0.57,9,0.509,15,0.034,29,1.656,32,1.281,36,1.476,45,0.432,55,0.5,70,0.02,71,0.025,72,0.02,87,2.579,89,2.791,110,3.46,111,3.658,112,0.706,160,2.511,197,1.697,246,1.803,282,1.203,353,1.965,401,2.254,497,4.126,506,4.126,663,3.174,666,3.387,670,2.85,672,4.126,682,2.832,683,4.952,684,4.952,685,4.952,686,3.917,687,3.917,688,3.581,689,3.917]],["title/coverage.html",[690,3.108]],["body/coverage.html",[0,2.382,1,2.136,5,0.205,6,2.777,15,0.033,40,3.15,48,1.736,56,0.03,70,0.017,71,0.023,72,0.017,98,0.94,107,1.769,112,0.433,137,0.94,156,1.794,158,2.777,173,2.136,174,2.777,182,1.736,199,1.58,206,1.58,207,1.918,211,1.115,215,1.024,227,1.918,245,3.224,282,1.648,320,3.224,321,2.136,404,1.918,405,3.224,420,1.736,488,2.777,511,2.777,524,2.136,525,2.777,537,2.777,550,2.777,583,2.136,584,2.777,639,2.777,646,2.777,670,1.918,675,2.41,676,2.41,682,2.41,690,2.41,691,2.777,692,2.777,693,3.333,694,4.469,695,2.777,696,5.405,697,6.109,698,2.777,699,2.777,700,2.777,701,5.876,702,2.41,703,5.024,704,4.459,705,4.459,706,4.459,707,3.333,708,3.714,709,2.777,710,2.777,711,3.714,712,3.333,713,3.333]],["title/dependencies.html",[75,1.643,714,2.641]],["body/dependencies.html",[5,0.234,15,0.034,19,3.165,35,3.513,47,0.9,52,1.801,54,1.979,56,0.025,70,0.02,71,0.025,72,0.02,75,1.646,89,2.303,91,3.165,92,3.165,95,2.186,104,2.436,105,2.436,106,2.436,232,2.436,236,2.186,356,2.748,358,2.748,410,2.436,411,2.436,416,1.801,522,2.436,526,2.748,715,3.8,716,5.644,717,3.8,718,4.858,719,4.047,720,4.461,721,4.701,722,3.8,723,3.8,724,3.8,725,3.8,726,3.8,727,3.8,728,4.047,729,4.047,730,3.8,731,4.047,732,3.8,733,3.8,734,4.047,735,3.8,736,3.8,737,3.8,738,3.165,739,3.8,740,3.8,741,3.8,742,3.8,743,3.8,744,3.8,745,3.8,746,3.8,747,3.165,748,3.8,749,2.748,750,3.8,751,3.8,752,3.8,753,3.8]],["title/miscellaneous/enumerations.html",[754,1.376,755,3.161]],["body/miscellaneous/enumerations.html",[9,0.632,15,0.032,70,0.025,71,0.029,72,0.025,335,3.248,353,2.24,457,3.618,702,3.514,754,2.531,755,4.048,756,4.048,757,5.645]],["title/index.html",[9,0.343,758,2.641,759,2.641]],["body/index.html",[4,0.137,5,0.228,7,0.229,8,3.061,15,0.033,28,0.31,36,1.052,39,2.129,40,0.82,41,0.906,42,0.341,43,2.129,44,0.82,45,0.355,63,0.682,64,0.906,70,0.013,71,0.013,72,0.008,73,0.906,75,2.069,85,1.676,89,1.209,98,0.444,104,2.939,106,1.009,112,0.332,116,1.311,118,0.853,120,1.076,122,2.291,137,0.444,160,1.635,162,2.064,163,2.68,165,1.311,166,1.009,169,0.784,177,1.009,192,1.009,193,1.311,218,1.209,238,1.311,249,0.82,257,1.138,259,0.906,265,1.845,266,1.845,276,1.138,288,1.845,295,1.138,298,1.138,300,1.138,302,1.468,304,1.138,309,2.129,327,1.009,330,0.906,333,0.906,340,1.138,343,2.676,348,1.138,353,1.468,360,1.138,365,1.845,369,1.138,371,1.138,372,1.676,376,1.138,378,1.138,380,1.138,382,1.138,384,1.138,386,1.138,388,1.138,390,1.138,416,1.928,446,1.009,452,1.845,453,1.138,454,0.906,469,1.138,481,1.138,616,3.083,666,1.468,690,1.845,691,2.125,696,2.68,719,2.68,720,4.405,721,4.603,728,3.083,729,3.388,731,3.083,734,3.083,738,3.083,747,1.311,749,1.138,760,1.574,761,1.574,762,4.067,763,1.574,764,1.574,765,1.574,766,2.551,767,1.574,768,2.551,769,1.574,770,1.574,771,2.551,772,4.354,773,3.217,774,2.551,775,1.574,776,1.574,777,4.585,778,1.574,779,1.574,780,3.217,781,1.574,782,1.574,783,5.588,784,3.217,785,3.217,786,1.574,787,1.574,788,4.585,789,1.574,790,1.574,791,1.574,792,1.574,793,3.7,794,3.217,795,1.574,796,1.574,797,3.7,798,1.574,799,1.574,800,1.574,801,2.551,802,2.551,803,1.574,804,1.574,805,2.551,806,1.574,807,1.574,808,1.574,809,3.217,810,3.217,811,1.574,812,2.551,813,1.574,814,3.217,815,1.574,816,2.551,817,2.551,818,1.574,819,1.574,820,1.574,821,1.574,822,1.574,823,1.574,824,2.551,825,1.574,826,1.574,827,1.574,828,1.574,829,4.067,830,2.551,831,1.574,832,1.574,833,1.574,834,2.551,835,5.071,836,3.7,837,1.574,838,3.7,839,2.551,840,4.776,841,1.574,842,3.217,843,2.551,844,1.574,845,1.574,846,1.574,847,1.574,848,2.551,849,2.551,850,3.217,851,1.574,852,1.574,853,1.574,854,1.574,855,2.551,856,2.551,857,1.574,858,4.354,859,1.574,860,1.574,861,1.574,862,1.574,863,1.574,864,1.574,865,1.574,866,1.574,867,1.574,868,1.574,869,1.574,870,1.574,871,1.574,872,1.574,873,1.574,874,1.574,875,1.574,876,1.574,877,1.574,878,1.574,879,1.574,880,1.574,881,1.574,882,1.574,883,1.574,884,1.574,885,2.551,886,1.574,887,1.574,888,2.551,889,1.311,890,1.574,891,1.574,892,1.574,893,1.574,894,1.574,895,2.551,896,1.574,897,1.574,898,1.574,899,2.551,900,2.551,901,1.574,902,1.574,903,1.574,904,2.551,905,1.574,906,1.574,907,1.574,908,1.574,909,2.551,910,2.551,911,2.551,912,1.574,913,2.551,914,1.574,915,1.574,916,1.574,917,2.551,918,1.574,919,2.551,920,1.574,921,1.574,922,2.551,923,1.574,924,1.574,925,2.551,926,1.574,927,2.551,928,1.574,929,1.574,930,1.574,931,2.551,932,1.574,933,1.574,934,1.574,935,1.574,936,2.68,937,1.574,938,1.574,939,1.574,940,1.574,941,1.574,942,2.125,943,1.574,944,1.574,945,1.574,946,2.551,947,2.551,948,2.551,949,1.574,950,1.574,951,1.574,952,2.551,953,1.574,954,1.574,955,1.574,956,1.574,957,2.551,958,1.574,959,1.574,960,1.574,961,1.574,962,1.574,963,1.574,964,1.574,965,1.574,966,1.574,967,1.574,968,1.574,969,1.574,970,1.574,971,1.574,972,2.551,973,1.574,974,1.574,975,2.551,976,3.7,977,3.217,978,3.7,979,2.551,980,2.551,981,1.574,982,1.574,983,3.217,984,1.574,985,1.574,986,3.217,987,1.574,988,1.574,989,1.574,990,1.574,991,1.574,992,1.574,993,1.574,994,1.574,995,1.574,996,1.574,997,2.68,998,2.125,999,1.574,1000,1.574,1001,1.574,1002,1.574,1003,1.574,1004,1.574,1005,1.574,1006,1.574,1007,1.574,1008,1.574,1009,1.574,1010,1.574,1011,1.574,1012,1.574,1013,1.574,1014,1.574,1015,1.574,1016,1.574,1017,1.574,1018,1.574,1019,1.574,1020,1.574,1021,1.574,1022,1.574,1023,1.574,1024,1.574,1025,2.551,1026,2.551,1027,1.574,1028,1.574,1029,1.574,1030,1.574,1031,1.574,1032,1.574,1033,1.574,1034,1.574,1035,1.574,1036,1.574,1037,1.574,1038,1.574,1039,1.574,1040,1.574]],["title/modules.html",[74,1.862]],["body/modules.html",[15,0.029,70,0.024,71,0.029,72,0.024,73,2.717,74,2.045,79,2.717,80,2.459,81,2.459,82,2.717,936,5.069,1041,6.084,1042,6.084,1043,6.204,1044,4.721,1045,4.721]],["title/overview.html",[1046,3.581]],["body/overview.html",[2,1.857,15,0.033,48,2.829,70,0.02,71,0.025,72,0.02,73,3.655,74,1.697,75,2.145,76,3.263,77,3.263,78,3.263,79,3.636,80,3.066,81,3.18,82,3.125,83,2.85,84,2.254,85,2.04,98,1.609,157,2.254,206,2.575,211,2.042,224,3.263,226,3.263,227,3.125,312,3.263,313,3.263,319,1.697,401,2.254,623,3.263,624,3.263,625,3.263,1046,3.263,1047,3.917,1048,3.917,1049,4.952,1050,3.917]],["title/miscellaneous/typealiases.html",[754,1.376,1051,3.794]],["body/miscellaneous/typealiases.html",[9,0.639,15,0.029,70,0.025,71,0.029,72,0.025,112,0.639,160,3.152,663,3.643,666,2.83,682,3.556,688,3.556,754,2.561,1052,4.917,1053,4.917]],["title/miscellaneous/variables.html",[330,2.183,754,1.376]],["body/miscellaneous/variables.html",[7,0.645,8,2.119,9,0.43,15,0.034,28,0.652,36,0.855,42,1.243,57,1.251,65,1.05,70,0.017,71,0.023,72,0.017,89,2.535,107,1.986,110,2.552,111,3.208,112,0.775,137,0.932,162,1.567,178,1.312,259,1.903,316,4.169,330,1.903,335,3.474,336,1.722,353,2.396,663,2.843,666,1.903,670,1.903,675,3.207,676,3.207,688,2.391,692,2.754,694,2.754,695,3.694,698,3.694,699,3.694,700,3.694,702,2.391,708,2.754,709,4.455,710,4.455,711,2.754,749,2.391,754,1.722,756,2.754,889,2.754,942,2.754,997,2.754,998,4.783,1054,4.435,1055,5.347,1056,4.435,1057,5.577,1058,3.306,1059,3.306,1060,4.435,1061,4.435,1062,4.435,1063,3.306,1064,3.306,1065,3.306,1066,3.306,1067,3.306,1068,3.306,1069,3.306,1070,3.306]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["0.1.13",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["0.2.34",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["1.0",{"_index":1064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.1",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["1.8.1",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":816,"title":{},"body":{"index.html":{}}}],["10.0.0",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":696,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["14d",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["17.1.1",{"_index":715,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["2.18.1",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["201",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["20m",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["2400",{"_index":881,"title":{},"body":{"index.html":{}}}],["255",{"_index":560,"title":{},"body":{"classes/Profile.html":{}}}],["3",{"_index":1048,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["3.3.3",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["4",{"_index":1049,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["4.5.5",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["4.8.3",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":882,"title":{},"body":{"index.html":{}}}],["400",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["401",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["404",{"_index":470,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["5",{"_index":1047,"title":{},"body":{"overview.html":{}}}],["5.0.4",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["5.3.0",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["5.3.2",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["5.5.0",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["7",{"_index":1050,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["8.0.4",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["9000",{"_index":844,"title":{},"body":{"index.html":{}}}],["__dirname",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["abstraction",{"_index":1009,"title":{},"body":{"index.html":{}}}],["access",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProfileController.html":{},"classes/Roles.html":{},"dependencies.html":{}}}],["accesscontrolmodule",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["accesscontrolmodule.forroles(roles",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["account",{"_index":449,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["acguard",{"_index":607,"title":{},"body":{"controllers/ProfileController.html":{}}}],["acguard)@useroles({resource",{"_index":589,"title":{},"body":{"controllers/ProfileController.html":{}}}],["action",{"_index":590,"title":{},"body":{"controllers/ProfileController.html":{}}}],["acts",{"_index":1008,"title":{},"body":{"index.html":{}}}],["actual",{"_index":897,"title":{},"body":{"index.html":{}}}],["address",{"_index":892,"title":{},"body":{"index.html":{}}}],["admin",{"_index":757,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["again",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["against",{"_index":365,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["aliases",{"_index":1052,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":385,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["alphanumeric",{"_index":878,"title":{},"body":{"index.html":{}}}],["angular",{"_index":771,"title":{},"body":{"index.html":{}}}],["another",{"_index":453,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["any'})@apiresponse({status",{"_index":592,"title":{},"body":{"controllers/ProfileController.html":{}}}],["anything",{"_index":959,"title":{},"body":{"index.html":{}}}],["api",{"_index":998,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api/auth",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/docs",{"_index":1068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/profile",{"_index":585,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apibearerauth",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["apiproperty",{"_index":518,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["apiproperty()@isemail()@isnotempty",{"_index":539,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["apiproperty()@isnotempty()@minlength(8",{"_index":545,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["apiproperty()@matches(/^[a",{"_index":541,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["apiproperty({required",{"_index":512,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["apiresponse",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["apis",{"_index":1002,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["apitags('authentication",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('profile",{"_index":610,"title":{},"body":{"controllers/ProfileController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"classes/Roles.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["app.register(fastifyratelimiter",{"_index":924,"title":{},"body":{"index.html":{}}}],["app.register(headers",{"_index":923,"title":{},"body":{"index.html":{}}}],["app.roles",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"classes/Roles.html":{}}}],["app.service",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.use",{"_index":930,"title":{},"body":{"index.html":{}}}],["app.use(headers",{"_index":929,"title":{},"body":{"index.html":{}}}],["app/roles.entity",{"_index":419,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["app_env",{"_index":369,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["app_url",{"_index":166,"title":{},"body":{"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["applications",{"_index":768,"title":{},"body":{"index.html":{}}}],["applied",{"_index":352,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["appmodule",{"_index":73,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["appreciated",{"_index":1020,"title":{},"body":{"index.html":{}}}],["approles",{"_index":457,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"miscellaneous/enumerations.html":{}}}],["approles.admin",{"_index":657,"title":{},"body":{"classes/Roles.html":{}}}],["appservice",{"_index":48,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appurl",{"_index":170,"title":{},"body":{"injectables/AppService.html":{}}}],["apt",{"_index":800,"title":{},"body":{"index.html":{}}}],["args",{"_index":689,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["associated",{"_index":334,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["assuming",{"_index":966,"title":{},"body":{"index.html":{}}}],["async",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["asynchronous",{"_index":672,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["auth.controller",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/payload/register.payload",{"_index":418,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["authcontroller",{"_index":173,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["authenticating",{"_index":885,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["authguard",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["authmodule",{"_index":79,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1040,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":206,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"coverage.html":{},"overview.html":{}}}],["authservice.prettyprintseconds(this.expiration",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["available",{"_index":1045,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":462,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{}}}],["await",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["backend",{"_index":776,"title":{},"body":{"index.html":{}}}],["bad",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception",{"_index":412,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["base",{"_index":868,"title":{},"body":{"index.html":{}}}],["based",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/Roles.html":{}}}],["bearer",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["before",{"_index":565,"title":{},"body":{"classes/Profile.html":{}}}],["below",{"_index":809,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":903,"title":{},"body":{"index.html":{}}}],["between",{"_index":910,"title":{},"body":{"index.html":{}}}],["beware",{"_index":654,"title":{},"body":{"classes/Roles.html":{}}}],["bloated",{"_index":940,"title":{},"body":{"index.html":{}}}],["body",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{}}}],["boilerplate",{"_index":772,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":344,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["both",{"_index":812,"title":{},"body":{"index.html":{}}}],["box",{"_index":780,"title":{},"body":{"index.html":{}}}],["branches",{"_index":1017,"title":{},"body":{"index.html":{}}}],["brew",{"_index":798,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1043,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1041,"title":{},"body":{"modules.html":{}}}],["builder",{"_index":1063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["building",{"_index":763,"title":{},"body":{"index.html":{}}}],["busy",{"_index":1037,"title":{},"body":{"index.html":{}}}],["bypass",{"_index":820,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":650,"title":{},"body":{"classes/Roles.html":{}}}],["change",{"_index":909,"title":{},"body":{"index.html":{}}}],["changed",{"_index":905,"title":{},"body":{"index.html":{}}}],["check",{"_index":394,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["checks",{"_index":339,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["choco",{"_index":799,"title":{},"body":{"index.html":{}}}],["choice",{"_index":953,"title":{},"body":{"index.html":{}}}],["choose",{"_index":452,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["choosing",{"_index":900,"title":{},"body":{"index.html":{}}}],["class",{"_index":56,"title":{"classes/ConfigService.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":319,"title":{},"body":{"classes/ConfigService.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_configmodule",{"_index":312,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_exports",{"_index":313,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":623,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_exports",{"_index":625,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_providers",{"_index":624,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["code",{"_index":913,"title":{},"body":{"index.html":{}}}],["column",{"_index":552,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["column({name",{"_index":558,"title":{},"body":{"classes/Profile.html":{}}}],["column({type",{"_index":652,"title":{},"body":{"classes/Roles.html":{}}}],["column({unique",{"_index":573,"title":{},"body":{"classes/Profile.html":{}}}],["comes",{"_index":777,"title":{},"body":{"index.html":{}}}],["command",{"_index":829,"title":{},"body":{"index.html":{}}}],["community",{"_index":1030,"title":{},"body":{"index.html":{}}}],["completed",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["completed'})@apiresponse({status",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["compose",{"_index":805,"title":{},"body":{"index.html":{}}}],["config",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["config.service",{"_index":315,"title":{},"body":{"modules/ConfigModule.html":{}}}],["config/config.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["config/config.service",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":80,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":98,"title":{"classes/ConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["configservice('.env",{"_index":318,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('db_database",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('webtoken_expiration_time",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('webtoken_secret_key",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.isenv('dev",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.validateinput(config",{"_index":363,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["configuration",{"_index":162,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":1015,"title":{},"body":{"index.html":{}}}],["conflict",{"_index":845,"title":{},"body":{"index.html":{}}}],["connection",{"_index":884,"title":{},"body":{"index.html":{}}}],["connections",{"_index":896,"title":{},"body":{"index.html":{}}}],["console",{"_index":922,"title":{},"body":{"index.html":{}}}],["const",{"_index":169,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"index.html":{}}}],["constructor",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["constructor(config",{"_index":159,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(configservice",{"_index":490,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(filepath",{"_index":324,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["constructor(jwtservice",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["constructor(profilerepository",{"_index":631,"title":{},"body":{"injectables/ProfileService.html":{}}}],["contain",{"_index":328,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["container",{"_index":853,"title":{},"body":{"index.html":{}}}],["control",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProfileController.html":{},"dependencies.html":{},"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"coverage.html":{}}}],["controller('api/auth",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('api/profile",{"_index":611,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["corresponding",{"_index":960,"title":{},"body":{"index.html":{}}}],["course",{"_index":965,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":690,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cp",{"_index":827,"title":{},"body":{"index.html":{}}}],["create",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["create(payload",{"_index":447,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["created",{"_index":446,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"index.html":{}}}],["createlogger(loggeropts",{"_index":1061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('profiles",{"_index":437,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["creates",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["createtoken",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["createtoken(undefined",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["createwinstonasyncproviders",{"_index":675,"title":{},"body":{"modules/WinstonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createwinstonasyncproviders(options",{"_index":680,"title":{},"body":{"modules/WinstonModule.html":{}}}],["createwinstonproviders",{"_index":676,"title":{},"body":{"modules/WinstonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createwinstonproviders(options",{"_index":679,"title":{},"body":{"modules/WinstonModule.html":{}}}],["crud",{"_index":407,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["crypto",{"_index":410,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["crypto.createhmac('sha256",{"_index":442,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{}}}],["current",{"_index":1065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currently",{"_index":451,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["d",{"_index":469,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["daily",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["data",{"_index":427,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["database",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["databases",{"_index":1011,"title":{},"body":{"index.html":{}}}],["date%.log",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["datepattern",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["db_database",{"_index":390,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_host",{"_index":386,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_password",{"_index":384,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_port",{"_index":388,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_type",{"_index":380,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["db_username",{"_index":382,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["dd",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["declaring",{"_index":1069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{}}}],["dedicated",{"_index":1004,"title":{},"body":{"index.html":{}}}],["default",{"_index":353,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultmeta",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{}}}],["delete",{"_index":482,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["delete(':username",{"_index":620,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(':username')@useguards(undefined",{"_index":588,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(username",{"_index":483,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["deleted",{"_index":484,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["deleted.affected",{"_index":486,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["demand",{"_index":988,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":75,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deploying",{"_index":848,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":824,"title":{},"body":{"index.html":{}}}],["describe",{"_index":1000,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":801,"title":{},"body":{"index.html":{}}}],["detached",{"_index":854,"title":{},"body":{"index.html":{}}}],["detailed",{"_index":916,"title":{},"body":{"index.html":{}}}],["details",{"_index":1014,"title":{},"body":{"index.html":{}}}],["determines",{"_index":865,"title":{},"body":{"index.html":{}}}],["dev",{"_index":867,"title":{},"body":{"index.html":{}}}],["development",{"_index":842,"title":{},"body":{"index.html":{}}}],["different",{"_index":894,"title":{},"body":{"index.html":{}}}],["directory",{"_index":851,"title":{},"body":{"index.html":{}}}],["docker",{"_index":783,"title":{},"body":{"index.html":{}}}],["docs",{"_index":986,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":691,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":873,"title":{},"body":{"index.html":{}}}],["dotenv",{"_index":356,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"dependencies.html":{}}}],["download",{"_index":834,"title":{},"body":{"index.html":{}}}],["downloaded",{"_index":795,"title":{},"body":{"index.html":{}}}],["dto",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["dynamicmodule",{"_index":667,"title":{},"body":{"modules/WinstonModule.html":{}}}],["e2e",{"_index":979,"title":{},"body":{"index.html":{}}}],["each",{"_index":932,"title":{},"body":{"index.html":{}}}],["edit",{"_index":471,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["edit(payload",{"_index":473,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["efficient",{"_index":764,"title":{},"body":{"index.html":{}}}],["email",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{}}}],["employs",{"_index":563,"title":{},"body":{"classes/Profile.html":{}}}],["empty",{"_index":887,"title":{},"body":{"index.html":{}}}],["encrypt/decrypt",{"_index":876,"title":{},"body":{"index.html":{}}}],["end",{"_index":994,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":889,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ensures",{"_index":347,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["entities",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":551,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["entity{.ts,.js",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":458,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["enumerations",{"_index":755,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":343,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["env.example",{"_index":828,"title":{},"body":{"index.html":{}}}],["envconfig",{"_index":321,"title":{"interfaces/EnvConfig.html":{}},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["environment",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["envvarsschema",{"_index":366,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["envvarsschema.validate",{"_index":396,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error(`config",{"_index":397,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error.message",{"_index":398,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["especially",{"_index":941,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":575,"title":{},"body":{"classes/Profile.html":{}}}],["exec",{"_index":977,"title":{},"body":{"index.html":{}}}],["execute",{"_index":849,"title":{},"body":{"index.html":{}}}],["executing",{"_index":822,"title":{},"body":{"index.html":{}}}],["exist",{"_index":480,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["existing",{"_index":831,"title":{},"body":{"index.html":{}}}],["exists",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["exp",{"_index":508,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["expire",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["expires",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["expiresin",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiresprettyprint",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["export",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["exports",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{}}}],["exposed",{"_index":843,"title":{},"body":{"index.html":{}}}],["express",{"_index":720,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["extends",{"_index":497,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["extractjwt",{"_index":495,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":501,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["factory",{"_index":685,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["failed",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["false",{"_index":503,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fastify",{"_index":721,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastifyadapter",{"_index":917,"title":{},"body":{"index.html":{}}}],["fastifyratelimiter",{"_index":920,"title":{},"body":{"index.html":{}}}],["feature",{"_index":970,"title":{},"body":{"index.html":{}}}],["features",{"_index":779,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":599,"title":{},"body":{"controllers/ProfileController.html":{}}}],["fetches",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["field",{"_index":515,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["fields",{"_index":445,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["filepath",{"_index":326,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["files",{"_index":995,"title":{},"body":{"index.html":{}}}],["folder",{"_index":992,"title":{},"body":{"index.html":{}}}],["follow",{"_index":806,"title":{},"body":{"index.html":{}}}],["following",{"_index":850,"title":{},"body":{"index.html":{}}}],["format",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["formats",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["forroot",{"_index":661,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forroot(options",{"_index":662,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forrootasync",{"_index":668,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forrootasync(options",{"_index":669,"title":{},"body":{"modules/WinstonModule.html":{}}}],["found",{"_index":616,"title":{},"body":{"controllers/ProfileController.html":{},"index.html":{}}}],["framework",{"_index":762,"title":{},"body":{"index.html":{}}}],["free",{"_index":811,"title":{},"body":{"index.html":{}}}],["from(value",{"_index":529,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["front",{"_index":993,"title":{},"body":{"index.html":{}}}],["fs",{"_index":359,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["full",{"_index":1033,"title":{},"body":{"index.html":{}}}],["fully",{"_index":1021,"title":{},"body":{"index.html":{}}}],["function",{"_index":684,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["further",{"_index":1013,"title":{},"body":{"index.html":{}}}],["generate",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["generated",{"_index":987,"title":{},"body":{"index.html":{}}}],["get(':username",{"_index":612,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get(':username')@useguards(undefined)@apiresponse({status",{"_index":598,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get('request/user",{"_index":67,"title":{},"body":{"controllers/AppController.html":{}}}],["get('request/user')@useguards(undefined)@apiresponse({status",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["get()@useguards(undefined)@apiresponse({status",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["get(id",{"_index":429,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["get(key",{"_index":331,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["getbyusername",{"_index":629,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getbyusername(username",{"_index":432,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["getbyusernameandpass",{"_index":630,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getbyusernameandpass(username",{"_index":435,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["getone",{"_index":444,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["getprofile",{"_index":586,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofile(@param('username",{"_index":614,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofile(username",{"_index":597,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getrequestuser",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["getrequestuser(@req",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["getrequestuser(req",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":758,"title":{"index.html":{}},"body":{}}],["github",{"_index":984,"title":{},"body":{"index.html":{}}}],["given",{"_index":336,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":673,"title":{},"body":{"modules/WinstonModule.html":{}}}],["going",{"_index":938,"title":{},"body":{"index.html":{}}}],["goodness",{"_index":1023,"title":{},"body":{"index.html":{}}}],["grabs",{"_index":531,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["graph",{"_index":1044,"title":{},"body":{"modules.html":{}}}],["gravatar",{"_index":411,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["hapi/joi",{"_index":358,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"dependencies.html":{}}}],["hash",{"_index":532,"title":{},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{}}}],["hashed",{"_index":434,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["headers",{"_index":919,"title":{},"body":{"index.html":{}}}],["heavily",{"_index":769,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":731,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["host",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["hosting",{"_index":996,"title":{},"body":{"index.html":{}}}],["hour",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["hours",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["hrf",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["http",{"_index":465,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["http://localhost:3306",{"_index":862,"title":{},"body":{"index.html":{}}}],["http://localhost:80",{"_index":861,"title":{},"body":{"index.html":{}}}],["http://localhost:9000",{"_index":860,"title":{},"body":{"index.html":{}}}],["https",{"_index":375,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["human",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["iat",{"_index":507,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["identifier",{"_index":692,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["igenericmessagebody",{"_index":404,"title":{"interfaces/IGenericMessageBody.html":{}},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":502,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":527,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["import",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{}}}],["imports",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{}}}],["including",{"_index":351,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["independently",{"_index":796,"title":{},"body":{"index.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":402,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["indicating",{"_index":879,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["inject",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/variables.html":{}}}],["inject('winston",{"_index":168,"title":{},"body":{"injectables/AppService.html":{}}}],["injectable",{"_index":156,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["injectables",{"_index":157,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"overview.html":{}}}],["injected",{"_index":329,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["injecting",{"_index":1070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectrepository",{"_index":414,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["injectrepository(profile",{"_index":424,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["injectrepository(roles",{"_index":425,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["inspired",{"_index":770,"title":{},"body":{"index.html":{}}}],["instead",{"_index":906,"title":{},"body":{"index.html":{}}}],["interface",{"_index":282,"title":{"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":401,"title":{},"body":{"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"overview.html":{}}}],["ip",{"_index":933,"title":{},"body":{"index.html":{}}}],["iprofile",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["isalphanumeric",{"_index":519,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["isemail",{"_index":548,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["isenv",{"_index":322,"title":{},"body":{"classes/ConfigService.html":{}}}],["isenv(env",{"_index":337,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["isnotempty",{"_index":520,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["it's",{"_index":880,"title":{},"body":{"index.html":{}}}],["itokenreturnbody",{"_index":207,"title":{"interfaces/ITokenReturnBody.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"coverage.html":{}}}],["javascript",{"_index":350,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi",{"_index":357,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.number().default('8889",{"_index":389,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.number().default(1800",{"_index":379,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.object",{"_index":368,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.objectschema",{"_index":367,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('localhost",{"_index":387,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('mariadb",{"_index":381,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('nest",{"_index":391,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('root",{"_index":383,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().required",{"_index":377,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().uri",{"_index":373,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["jwt",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":500,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":505,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["jwtstrategy",{"_index":227,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keep",{"_index":455,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["keepconnectionalive",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":333,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["key).digest('hex",{"_index":476,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["layer",{"_index":1010,"title":{},"body":{"index.html":{}}}],["leave",{"_index":939,"title":{},"body":{"index.html":{}}}],["left",{"_index":886,"title":{},"body":{"index.html":{}}}],["length",{"_index":559,"title":{},"body":{"classes/Profile.html":{}}}],["level",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["library",{"_index":962,"title":{},"body":{"index.html":{}}}],["license",{"_index":1039,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1026,"title":{},"body":{"index.html":{}}}],["limit",{"_index":729,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["lines",{"_index":912,"title":{},"body":{"index.html":{}}}],["loads",{"_index":852,"title":{},"body":{"index.html":{}}}],["local",{"_index":968,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":794,"title":{},"body":{"index.html":{}}}],["locally",{"_index":786,"title":{},"body":{"index.html":{}}}],["location",{"_index":1006,"title":{},"body":{"index.html":{}}}],["logger",{"_index":160,"title":{},"body":{"injectables/AppService.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["loggeroptions",{"_index":688,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["loggeropts",{"_index":1060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging",{"_index":163,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["login",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{}}}],["login(@body",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(payload",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["login/register",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["loginpayload",{"_index":182,"title":{"classes/LoginPayload.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"coverage.html":{}}}],["logs",{"_index":165,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["logs/application",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["long",{"_index":1031,"title":{},"body":{"index.html":{}}}],["mac",{"_index":813,"title":{},"body":{"index.html":{}}}],["machine",{"_index":969,"title":{},"body":{"index.html":{}}}],["made",{"_index":773,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":914,"title":{},"body":{"index.html":{}}}],["mainly",{"_index":869,"title":{},"body":{"index.html":{}}}],["make",{"_index":784,"title":{},"body":{"index.html":{}}}],["making",{"_index":456,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["manual",{"_index":825,"title":{},"body":{"index.html":{}}}],["many",{"_index":571,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["manytoone",{"_index":656,"title":{},"body":{"classes/Roles.html":{}}}],["manytoone(type",{"_index":658,"title":{},"body":{"classes/Roles.html":{}}}],["manytoone(undefined",{"_index":648,"title":{},"body":{"classes/Roles.html":{}}}],["mapping",{"_index":360,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["master",{"_index":1018,"title":{},"body":{"index.html":{}}}],["matches",{"_index":341,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["matches(/^[a",{"_index":549,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["matching",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor((ntime",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["math.floor(ntime",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["max",{"_index":925,"title":{},"body":{"index.html":{}}}],["maxfiles",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["maxsize",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":409,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["metadata",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{}}}],["method",{"_index":506,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["minlength",{"_index":521,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["minlength(8",{"_index":523,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["mins",{"_index":883,"title":{},"body":{"index.html":{}}}],["minute",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["minutes",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["miscellaneous",{"_index":754,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1025,"title":{},"body":{"index.html":{}}}],["mm",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":839,"title":{},"body":{"index.html":{}}}],["models",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["module",{"_index":36,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["modulemetadata",{"_index":686,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["modules",{"_index":74,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":957,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":972,"title":{},"body":{"index.html":{}}}],["moving",{"_index":937,"title":{},"body":{"index.html":{}}}],["mssql",{"_index":958,"title":{},"body":{"index.html":{}}}],["mutated",{"_index":472,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["mysql",{"_index":738,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["mysql/mariadb",{"_index":952,"title":{},"body":{"index.html":{}}}],["name",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["necessary",{"_index":964,"title":{},"body":{"index.html":{}}}],["needed",{"_index":348,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["nest",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProfileController.html":{},"dependencies.html":{},"index.html":{}}}],["nestfactory.create",{"_index":921,"title":{},"body":{"index.html":{}}}],["nestfactory.create(appmodule",{"_index":928,"title":{},"body":{"index.html":{}}}],["nestfastifyapplication",{"_index":918,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces",{"_index":687,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["nestjs/core",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":719,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["nestjs/swagger",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"classes/RegisterPayload.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IGenericMessageBody.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["new",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nginx",{"_index":859,"title":{},"body":{"index.html":{}}}],["nights",{"_index":1035,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":761,"title":{},"body":{"index.html":{}}}],["non",{"_index":782,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":413,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["note",{"_index":810,"title":{},"body":{"index.html":{}}}],["npm",{"_index":835,"title":{},"body":{"index.html":{}}}],["ntime",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["number",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["number(time",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["object",{"_index":327,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["object.keys(payload).foreach(key",{"_index":475,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["offers",{"_index":901,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":649,"title":{},"body":{"classes/Roles.html":{}}}],["one",{"_index":454,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"index.html":{}}}],["ones",{"_index":915,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":576,"title":{},"body":{"classes/Profile.html":{}}}],["onetomany(type",{"_index":580,"title":{},"body":{"classes/Profile.html":{}}}],["onetomany(undefined",{"_index":567,"title":{},"body":{"classes/Profile.html":{}}}],["ongoing",{"_index":1027,"title":{},"body":{"index.html":{}}}],["open",{"_index":997,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["operating",{"_index":804,"title":{},"body":{"index.html":{}}}],["operation",{"_index":408,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["operations",{"_index":899,"title":{},"body":{"index.html":{}}}],["optional",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["options",{"_index":666,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["options.imports",{"_index":681,"title":{},"body":{"modules/WinstonModule.html":{}}}],["options.inject",{"_index":1059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.usefactory",{"_index":1058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"index.html":{},"overview.html":{}}}],["outlined",{"_index":808,"title":{},"body":{"index.html":{}}}],["over",{"_index":904,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1046,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":714,"title":{"dependencies.html":{}},"body":{}}],["pages",{"_index":985,"title":{},"body":{"index.html":{}}}],["panel",{"_index":791,"title":{},"body":{"index.html":{}}}],["param",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["param('username",{"_index":621,"title":{},"body":{"controllers/ProfileController.html":{}}}],["parameter",{"_index":342,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["parameters",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["parse",{"_index":355,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["parse(fs.readfilesync(filepath",{"_index":361,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["partial",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["particular",{"_index":602,"title":{},"body":{"controllers/ProfileController.html":{}}}],["passport",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProfileModule.html":{}}}],["passportmodule.register",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":496,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":498,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{}}}],["password).digest('hex",{"_index":443,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["password.transformer",{"_index":577,"title":{},"body":{"classes/Profile.html":{}}}],["passwords",{"_index":564,"title":{},"body":{"classes/Profile.html":{}}}],["passwordtransformer",{"_index":524,"title":{"classes/PasswordTransformer.html":{}},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"coverage.html":{}}}],["patch",{"_index":538,"title":{},"body":{"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{}}}],["patch()@useguards(undefined)@useroles({resource",{"_index":604,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofile",{"_index":587,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofile(@body",{"_index":618,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofile(payload",{"_index":603,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofilepayload",{"_index":420,"title":{"classes/PatchProfilePayload.html":{}},"body":{"interfaces/IGenericMessageBody.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["payload",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{}}}],["payload/login.payload",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["payload/patch.profile.payload",{"_index":421,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["payload/register.payload",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["payload[key",{"_index":478,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["people",{"_index":1024,"title":{},"body":{"index.html":{}}}],["per",{"_index":935,"title":{},"body":{"index.html":{}}}],["perform",{"_index":898,"title":{},"body":{"index.html":{}}}],["performance",{"_index":902,"title":{},"body":{"index.html":{}}}],["permit",{"_index":655,"title":{},"body":{"classes/Roles.html":{}}}],["personal",{"_index":832,"title":{},"body":{"index.html":{}}}],["pg",{"_index":468,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["pick",{"_index":683,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["please",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["populated",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["port",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["ports",{"_index":893,"title":{},"body":{"index.html":{}}}],["possession",{"_index":591,"title":{},"body":{"controllers/ProfileController.html":{}}}],["possible",{"_index":1028,"title":{},"body":{"index.html":{}}}],["post",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@apiresponse({status",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apiresponse({status",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":956,"title":{},"body":{"index.html":{}}}],["power",{"_index":871,"title":{},"body":{"index.html":{}}}],["pr",{"_index":1019,"title":{},"body":{"index.html":{}}}],["pre",{"_index":837,"title":{},"body":{"index.html":{}}}],["preferred",{"_index":803,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["prerequisite",{"_index":821,"title":{},"body":{"index.html":{}}}],["prerequisites",{"_index":781,"title":{},"body":{"index.html":{}}}],["prettyprintseconds",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["prettyprintseconds(time",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["primarygeneratedcolumn",{"_index":555,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["private",{"_index":167,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}}}],["pro",{"_index":817,"title":{},"body":{"index.html":{}}}],["procedure",{"_index":807,"title":{},"body":{"index.html":{}}}],["proceed",{"_index":907,"title":{},"body":{"index.html":{}}}],["prod",{"_index":371,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["produce",{"_index":991,"title":{},"body":{"index.html":{}}}],["production",{"_index":838,"title":{},"body":{"index.html":{}}}],["profile",{"_index":215,"title":{"classes/Profile.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"coverage.html":{}}}],["profile.controller",{"_index":627,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.entity",{"_index":417,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["profile.roles",{"_index":659,"title":{},"body":{"classes/Roles.html":{}}}],["profile.service",{"_index":609,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/profile.entity",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/Roles.html":{}}}],["profile/profile.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["profile/profile.service",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["profile[key",{"_index":477,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["profilecontroller",{"_index":583,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilemodule",{"_index":81,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profilerepository",{"_index":422,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["profiles",{"_index":578,"title":{},"body":{"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/Roles.html":{}}}],["profiles.password",{"_index":439,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["profileservice",{"_index":211,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["progress",{"_index":1016,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":760,"title":{},"body":{"index.html":{}}}],["project",{"_index":856,"title":{},"body":{"index.html":{}}}],["promise",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["proper",{"_index":967,"title":{},"body":{"index.html":{}}}],["properties",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["protocol",{"_index":464,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["prototype",{"_index":775,"title":{},"body":{"index.html":{}}}],["provide",{"_index":316,"title":{},"body":{"modules/ConfigModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":450,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["provider",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["provides",{"_index":1003,"title":{},"body":{"index.html":{}}}],["public",{"_index":678,"title":{},"body":{"modules/WinstonModule.html":{}}}],["purge",{"_index":946,"title":{},"body":{"index.html":{}}}],["purged",{"_index":945,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":875,"title":{},"body":{"index.html":{}}}],["queried",{"_index":428,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["quick",{"_index":857,"title":{},"body":{"index.html":{}}}],["quickly",{"_index":774,"title":{},"body":{"index.html":{}}}],["r",{"_index":467,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["random",{"_index":877,"title":{},"body":{"index.html":{}}}],["rate",{"_index":728,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["ratelimiter",{"_index":927,"title":{},"body":{"index.html":{}}}],["react",{"_index":846,"title":{},"body":{"index.html":{}}}],["read",{"_index":864,"title":{},"body":{"index.html":{}}}],["readable",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["readonly",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["received",{"_index":613,"title":{},"body":{"controllers/ProfileController.html":{}}}],["received'})@apiresponse({status",{"_index":593,"title":{},"body":{"controllers/ProfileController.html":{}}}],["recommended",{"_index":888,"title":{},"body":{"index.html":{}}}],["records",{"_index":487,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["reflect",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"classes/RegisterPayload.html":{}}}],["register(@body",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(payload",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["registerpayload",{"_index":199,"title":{"classes/RegisterPayload.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"coverage.html":{}}}],["registration",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["relational",{"_index":1007,"title":{},"body":{"index.html":{}}}],["relations",{"_index":431,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["relationship",{"_index":572,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["rely",{"_index":1022,"title":{},"body":{"index.html":{}}}],["remove",{"_index":596,"title":{},"body":{"controllers/ProfileController.html":{}}}],["removed",{"_index":872,"title":{},"body":{"index.html":{}}}],["removes",{"_index":595,"title":{},"body":{"controllers/ProfileController.html":{}}}],["removing",{"_index":947,"title":{},"body":{"index.html":{}}}],["replace",{"_index":830,"title":{},"body":{"index.html":{}}}],["repository",{"_index":415,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["represent",{"_index":570,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["represents",{"_index":392,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"modules/WinstonModule.html":{}}}],["req",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["req.user",{"_index":69,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["request'})@apiresponse({status",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["requests",{"_index":934,"title":{},"body":{"index.html":{}}}],["required",{"_index":372,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{},"index.html":{}}}],["reset",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["resource",{"_index":617,"title":{},"body":{"controllers/ProfileController.html":{}}}],["respectively",{"_index":863,"title":{},"body":{"index.html":{}}}],["response",{"_index":406,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["restful",{"_index":1001,"title":{},"body":{"index.html":{}}}],["result",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":72,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":601,"title":{},"body":{"controllers/ProfileController.html":{}}}],["return",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["rich",{"_index":971,"title":{},"body":{"index.html":{}}}],["rimraf",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["rm",{"_index":948,"title":{},"body":{"index.html":{}}}],["road",{"_index":1032,"title":{},"body":{"index.html":{}}}],["role",{"_index":581,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["role.profile",{"_index":582,"title":{},"body":{"classes/Profile.html":{}}}],["role.role",{"_index":510,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["roles",{"_index":107,"title":{"classes/Roles.html":{}},"body":{"modules/AppModule.html":{},"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesbuilder",{"_index":1062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolesrepository",{"_index":423,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["root",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["rotate",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["rotatefile",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["route",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["run",{"_index":840,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":747,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["s",{"_index":466,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["save",{"_index":951,"title":{},"body":{"index.html":{}}}],["saveif",{"_index":950,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":765,"title":{},"body":{"index.html":{}}}],["schema",{"_index":364,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["scheme",{"_index":374,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["second",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["seconds",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["secret",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["secretorkey",{"_index":504,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":778,"title":{},"body":{"index.html":{}}}],["serve",{"_index":874,"title":{},"body":{"index.html":{}}}],["server",{"_index":766,"title":{},"body":{"index.html":{}}}],["service",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["set",{"_index":340,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["setparameter",{"_index":441,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["setparameter('username",{"_index":440,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["settings",{"_index":833,"title":{},"body":{"index.html":{}}}],["setup",{"_index":802,"title":{},"body":{"index.html":{}}}],["short",{"_index":1067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["showcase",{"_index":870,"title":{},"body":{"index.html":{}}}],["side",{"_index":767,"title":{},"body":{"index.html":{}}}],["signed",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["signoptions",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{}}}],["simply",{"_index":989,"title":{},"body":{"index.html":{}}}],["sits",{"_index":890,"title":{},"body":{"index.html":{}}}],["sleepless",{"_index":1034,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{}}}],["specification",{"_index":999,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":955,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":963,"title":{},"body":{"index.html":{}}}],["src/.../app.roles.ts",{"_index":756,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../winston.constants.ts",{"_index":1056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../winston.interfaces.ts",{"_index":1053,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../winston.providers.ts",{"_index":1054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":694,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/modules/app/app.controller.ts:26",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/app/app.controller.ts:39",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/app/app.module.ts",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/app/app.roles.ts",{"_index":702,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/modules/app/app.service.ts",{"_index":158,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/modules/app/app.service.ts:24",{"_index":164,"title":{},"body":{"injectables/AppService.html":{}}}],["src/modules/app/app.service.ts:9",{"_index":161,"title":{},"body":{"injectables/AppService.html":{}}}],["src/modules/app/roles.entity.ts",{"_index":646,"title":{},"body":{"classes/Roles.html":{},"coverage.html":{}}}],["src/modules/app/roles.entity.ts:14",{"_index":647,"title":{},"body":{"classes/Roles.html":{}}}],["src/modules/app/roles.entity.ts:25",{"_index":653,"title":{},"body":{"classes/Roles.html":{}}}],["src/modules/app/roles.entity.ts:31",{"_index":651,"title":{},"body":{"classes/Roles.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:32",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:45",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:35",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:56",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:79",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:95",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/jwt.strategy.ts",{"_index":488,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/jwt.strategy.ts:12",{"_index":491,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:34",{"_index":493,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/payload/login.payload.ts",{"_index":511,"title":{},"body":{"classes/LoginPayload.html":{},"coverage.html":{}}}],["src/modules/auth/payload/login.payload.ts:16",{"_index":517,"title":{},"body":{"classes/LoginPayload.html":{}}}],["src/modules/auth/payload/login.payload.ts:26",{"_index":514,"title":{},"body":{"classes/LoginPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts",{"_index":639,"title":{},"body":{"classes/RegisterPayload.html":{},"coverage.html":{}}}],["src/modules/auth/payload/register.payload.ts:22",{"_index":641,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:32",{"_index":645,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:42",{"_index":643,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:52",{"_index":644,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/config/config.module.ts",{"_index":314,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/modules/config/config.service.ts",{"_index":320,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["src/modules/config/config.service.ts:19",{"_index":325,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:36",{"_index":346,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:78",{"_index":332,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:8",{"_index":403,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["src/modules/config/config.service.ts:87",{"_index":338,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/profile/password.transformer.ts",{"_index":525,"title":{},"body":{"classes/PasswordTransformer.html":{},"coverage.html":{}}}],["src/modules/profile/password.transformer.ts:12",{"_index":534,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["src/modules/profile/password.transformer.ts:20",{"_index":530,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts",{"_index":537,"title":{},"body":{"classes/PatchProfilePayload.html":{},"coverage.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:20",{"_index":540,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:30",{"_index":547,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:38",{"_index":544,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:46",{"_index":546,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/profile.controller.ts",{"_index":584,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/modules/profile/profile.controller.ts:40",{"_index":600,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:64",{"_index":606,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:82",{"_index":594,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.entity.ts",{"_index":550,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/modules/profile/profile.entity.ts:17",{"_index":556,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:23",{"_index":574,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:29",{"_index":557,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:35",{"_index":554,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:41",{"_index":553,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:47",{"_index":569,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.entity.ts:58",{"_index":562,"title":{},"body":{"classes/Profile.html":{}}}],["src/modules/profile/profile.module.ts",{"_index":626,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/modules/profile/profile.service.ts",{"_index":405,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/modules/profile/profile.service.ts:115",{"_index":635,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:138",{"_index":634,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:30",{"_index":632,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:48",{"_index":636,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:57",{"_index":637,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:67",{"_index":638,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:84",{"_index":633,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/winston/winston.constants.ts",{"_index":708,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/winston/winston.interfaces.ts",{"_index":682,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/modules/winston/winston.module.ts",{"_index":660,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.module.ts:21",{"_index":664,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.module.ts:35",{"_index":671,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.providers.ts",{"_index":711,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stack",{"_index":789,"title":{},"body":{"index.html":{}}}],["start",{"_index":793,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":841,"title":{},"body":{"index.html":{}}}],["started",{"_index":759,"title":{"index.html":{}},"body":{}}],["statements",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/ITokenReturnBody.html":{},"modules/WinstonModule.html":{},"index.html":{}}}],["status",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["steps",{"_index":908,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":489,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PasswordTransformer.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":499,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":936,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supports",{"_index":954,"title":{},"body":{"index.html":{}}}],["sure",{"_index":785,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1042,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":734,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["swagger_api_current_version",{"_index":695,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_description",{"_index":698,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_name",{"_index":699,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_root",{"_index":700,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["synchronize",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":481,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["table",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":978,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":982,"title":{},"body":{"index.html":{}}}],["test:covnon",{"_index":981,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":980,"title":{},"body":{"index.html":{}}}],["testing",{"_index":974,"title":{},"body":{"index.html":{}}}],["tests",{"_index":976,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1029,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":973,"title":{},"body":{"index.html":{}}}],["this.appservice.root",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.createtoken(profile",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(payload",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config.get('app_url",{"_index":171,"title":{},"body":{"injectables/AppService.html":{}}}],["this.configservice.get('webtoken_expiration_time",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.envconfig",{"_index":362,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.envconfig.app_env",{"_index":400,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.envconfig[key",{"_index":399,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.expiration",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.getbyusername(payload.username",{"_index":448,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.getbyusername(username",{"_index":474,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.jwtservice.sign",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.logger.info('logging",{"_index":172,"title":{},"body":{"injectables/AppService.html":{}}}],["this.profilerepository",{"_index":436,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.create",{"_index":461,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.delete",{"_index":485,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.findone",{"_index":433,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.findone(id",{"_index":430,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.save",{"_index":460,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.save(profile",{"_index":479,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profileservice.create(payload",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.profileservice.delete(username",{"_index":622,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.edit(payload",{"_index":619,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getbyusername(username",{"_index":615,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getbyusernameandpass",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.rolesrepository.save(roles",{"_index":459,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["throw",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["thus",{"_index":943,"title":{},"body":{"index.html":{}}}],["time",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["timediff",{"_index":509,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["timewindow",{"_index":926,"title":{},"body":{"index.html":{}}}],["to(value",{"_index":533,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["token",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["toolbox",{"_index":819,"title":{},"body":{"index.html":{}}}],["transform",{"_index":535,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["transformer",{"_index":526,"title":{},"body":{"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"dependencies.html":{}}}],["transports",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["trigger",{"_index":792,"title":{},"body":{"index.html":{}}}],["true",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"classes/RegisterPayload.html":{}}}],["true})@isalphanumeric()@isnotempty",{"_index":516,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["true})@isemail()@isnotempty",{"_index":640,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["true})@isnotempty()@minlength(8",{"_index":513,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["true})@matches(/^[a",{"_index":642,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["try",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["two",{"_index":911,"title":{},"body":{"index.html":{}}}],["type",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"classes/Roles.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1051,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":983,"title":{},"body":{"index.html":{}}}],["typeorm",{"_index":416,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/PasswordTransformer.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{}}}],["typeormmodule.forfeature([profile",{"_index":628,"title":{},"body":{"modules/ProfileModule.html":{}}}],["typeormmodule.forrootasync",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":895,"title":{},"body":{"index.html":{}}}],["types/express",{"_index":949,"title":{},"body":{"index.html":{}}}],["typical",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["typing",{"_index":990,"title":{},"body":{"index.html":{}}}],["ui",{"_index":749,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":568,"title":{},"body":{"classes/Profile.html":{},"classes/Roles.html":{}}}],["undefined})@exclude",{"_index":561,"title":{},"body":{"classes/Profile.html":{}}}],["unique",{"_index":579,"title":{},"body":{"classes/Profile.html":{}}}],["unit",{"_index":975,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["unused",{"_index":944,"title":{},"body":{"index.html":{}}}],["up",{"_index":855,"title":{},"body":{"index.html":{}}}],["update",{"_index":605,"title":{},"body":{"controllers/ProfileController.html":{}}}],["url",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["url(payload.email",{"_index":463,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["use",{"_index":858,"title":{},"body":{"index.html":{}}}],["used",{"_index":942,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["useguards(authguard('jwt",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["user",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["username",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{}}}],["useroles",{"_index":608,"title":{},"body":{"controllers/ProfileController.html":{}}}],["users",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["usevalue",{"_index":317,"title":{},"body":{"modules/ConfigModule.html":{}}}],["using",{"_index":797,"title":{},"body":{"index.html":{}}}],["usually",{"_index":891,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":866,"title":{},"body":{"index.html":{}}}],["utilizing",{"_index":787,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":426,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Roles.html":{}}}],["valid",{"_index":494,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["valid('dev",{"_index":370,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validate",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["validate(undefined",{"_index":492,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":349,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validatedenvconfig",{"_index":395,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validateinput",{"_index":323,"title":{},"body":{"classes/ConfigService.html":{}}}],["validateinput(envconfig",{"_index":345,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validates",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["validateuser",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["validateuser(undefined",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":393,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["validator",{"_index":522,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{},"dependencies.html":{}}}],["value",{"_index":335,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/PasswordTransformer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value).digest('hex",{"_index":536,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["values",{"_index":354,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["valuetransformer",{"_index":528,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["variable",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{},"index.html":{}}}],["variables",{"_index":330,"title":{"miscellaneous/variables.html":{}},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":1066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["view",{"_index":1012,"title":{},"body":{"index.html":{}}}],["vm",{"_index":823,"title":{},"body":{"index.html":{}}}],["vue",{"_index":847,"title":{},"body":{"index.html":{}}}],["web",{"_index":788,"title":{},"body":{"index.html":{}}}],["webtoken_expiration_time",{"_index":378,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["webtoken_secret_key",{"_index":376,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["weekends",{"_index":1038,"title":{},"body":{"index.html":{}}}],["where('profiles.username",{"_index":438,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["whether",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["windowms",{"_index":931,"title":{},"body":{"index.html":{}}}],["windows",{"_index":814,"title":{},"body":{"index.html":{}}}],["winson",{"_index":665,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["winston.format.json",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.interfaces",{"_index":674,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston.providers",{"_index":677,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston.transports.console",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["winston/winston.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_options",{"_index":709,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["winston_module_provider",{"_index":710,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["winstonmodule",{"_index":82,"title":{"modules/WinstonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WinstonModule.html":{},"modules.html":{},"overview.html":{}}}],["winstonmodule.forrootasync",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmoduleasyncoptions",{"_index":670,"title":{"interfaces/WinstonModuleAsyncOptions.html":{}},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["winstonmoduleoptions",{"_index":663,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":826,"title":{},"body":{"index.html":{}}}],["work",{"_index":1005,"title":{},"body":{"index.html":{}}}],["workaround",{"_index":818,"title":{},"body":{"index.html":{}}}],["working",{"_index":1036,"title":{},"body":{"index.html":{}}}],["works",{"_index":815,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":961,"title":{},"body":{"index.html":{}}}],["writing",{"_index":566,"title":{},"body":{"classes/Profile.html":{}}}],["xampp",{"_index":790,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":836,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["z",{"_index":543,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["za",{"_index":542,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["zippedarchive",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequestUser\n                            \n                            \n                                root\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRequestUser\n                        \n                    \n                \n            \n            \n                \ngetRequestUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('request/user')@UseGuards(undefined)@ApiResponse({status: 200, description: 'User Metadata Request Completed'})@ApiResponse({status: 400, description: 'User Metadata Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/app/app.controller.ts:39\n                \n            \n\n\n            \n                \n                    Fetches request metadata\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request body\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        the request user populated from the passport module\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        root\n                        \n                    \n                \n            \n            \n                \nroot()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(undefined)@ApiResponse({status: 200, description: 'Root Request Completed'})@ApiResponse({status: 400, description: 'Root Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/app/app.controller.ts:26\n                \n            \n\n\n            \n                \n                    Returns the an environment variable from config file\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the application environment url\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, UseGuards } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * App Controller\n */\n@ApiBearerAuth()\n@Controller()\nexport class AppController {\n  /**\n   * Constructor\n   * @param {AppService} appService app service\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returns the an environment variable from config file\n   * @returns {string} the application environment url\n   */\n  @Get()\n  @UseGuards(AuthGuard('jwt'))\n  @ApiResponse({ status: 200, description: 'Root Request Completed' })\n  @ApiResponse({ status: 400, description: 'Root Request Failed' })\n  root(): string {\n    return this.appService.root();\n  }\n\n  /**\n   * Fetches request metadata\n   * @param {Req} req the request body\n   * @returns {Partial} the request user populated from the passport module\n   */\n  @Get('request/user')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiResponse({ status: 200, description: 'User Metadata Request Completed' })\n  @ApiResponse({ status: 400, description: 'User Metadata Request Failed' })\n  getRequestUser(@Req() req): Partial {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nWinstonModule\n\nWinstonModule\n\nAppModule -->\n\nWinstonModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            WinstonModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as winston from 'winston';\nimport * as rotateFile from 'winston-daily-rotate-file';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '../config/config.module';\nimport { ConfigService } from '../config/config.service';\nimport { AuthModule } from '../auth/auth.module';\nimport { ProfileModule } from '../profile/profile.module';\nimport { WinstonModule } from '../winston/winston.module';\nimport { AccessControlModule } from 'nest-access-control';\nimport { roles } from './app.roles';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE'),\n          entities: [__dirname + './../**/**.entity{.ts,.js}'],\n          synchronize: configService.isEnv('dev'),\n          keepConnectionAlive: true,\n        } as TypeOrmModuleAsyncOptions;\n      },\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.isEnv('dev')\n          ? {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.File({\n                  filename: 'logs/error.log',\n                  level: 'error',\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new rotateFile({\n                  filename: 'logs/application-%DATE%.log',\n                  datePattern: 'YYYY-MM-DD',\n                  zippedArchive: true,\n                  maxSize: '20m',\n                  maxFiles: '14d',\n                }),\n              ],\n            };\n      },\n    }),\n    AccessControlModule.forRoles(roles),\n    ConfigModule,\n    AuthModule,\n    ProfileModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                root\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/modules/app/app.service.ts:9\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration service\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logging service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        root\n                        \n                    \n                \n            \n            \n                \nroot()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/app/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Fetches and logs the APP_URL environment variable from a configuration file.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the application url\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '../config/config.service';\nimport { Logger } from 'winston';\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {ConfigService} config configuration service\n   * @param {Logger} logger logging service\n   */\n  constructor(\n    private readonly config: ConfigService,\n    @Inject('winston') private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Fetches and logs the APP_URL environment variable from a configuration file.\n   * @returns {string} the application url\n   */\n  root(): string {\n    const appURL = this.config.get('APP_URL');\n    this.logger.info('Logging the APP_URL -> ' + appURL);\n    return appURL;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/auth\n            \n\n\n            \n                Description\n            \n            \n                Authentication Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n                    Login route to validate and create tokens for users\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:45\n                \n            \n\n\n            \n                \n                    Authentication route to register\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AuthService, ITokenReturnBody } from './auth.service';\nimport { LoginPayload } from './payload/login.payload';\nimport { RegisterPayload } from './payload/register.payload';\nimport { ProfileService } from '../profile/profile.service';\n\n/**\n * Authentication Controller\n */\n@ApiTags('authentication')\n@Controller('api/auth')\nexport class AuthController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly profileService: ProfileService,\n  ) {}\n\n  /**\n   * Login route to validate and create tokens for users\n   * @param {LoginPayload} payload the login dto\n   */\n  @Post('login')\n  @ApiResponse({ status: 201, description: 'Login Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(@Body() payload: LoginPayload): Promise {\n    const profile = await this.authService.validateUser(payload);\n    return await this.authService.createToken(profile);\n  }\n\n  /**\n   * Authentication route to register\n   * @param {RegisterPayload} payload the registration dto\n   */\n  @Post('register')\n  @ApiResponse({ status: 201, description: 'Registration Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(@Body() payload: RegisterPayload) {\n    const profile = await this.profileService.create(payload);\n    return await this.authService.createToken(profile);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAuthModule -->\n\nProfileModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigModule\n                        \n                        \n                            ProfileModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { ProfileModule } from '../profile/profile.module';\nimport { ConfigModule } from '../config/config.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigService } from '../config/config.service';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get('WEBTOKEN_SECRET_KEY'),\n          signOptions: {\n            ...(configService.get('WEBTOKEN_EXPIRATION_TIME')\n              ? {\n                  expiresIn: Number(\n                    configService.get('WEBTOKEN_EXPIRATION_TIME'),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n    ConfigModule,\n    ProfileModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [PassportModule.register({ defaultStrategy: 'jwt' })],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createToken\n                            \n                            \n                                    Private\n                                    Static\n                                prettyPrintSeconds\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, profileService: ProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:35\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration service\n\n                                                        \n                                                \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        ProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                profile service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(undefined: Profile)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:56\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on IProfile payload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        token body\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        prettyPrintSeconds\n                        \n                    \n                \n            \n            \n                \n                    \n                    prettyPrintSeconds(time: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n                    Formats the time in seconds into human-readable format\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        hrf time\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: LoginPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:95\n                \n            \n\n\n            \n                \n                    Validates whether or not the profile exists in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        registered profile\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:35\n                        \n                    \n\n            \n                \n                    Time in seconds when the token is to expire\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ProfileService } from '../profile/profile.service';\nimport { ConfigService } from '../config/config.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { Profile } from '../profile/profile.entity';\nimport { LoginPayload } from './payload/login.payload';\n\n/**\n * Models a typical Login/Register route return body\n */\nexport interface ITokenReturnBody {\n  /**\n   * When the token is to expire in seconds\n   */\n  expires: string;\n  /**\n   * A human-readable format of expires\n   */\n  expiresPrettyPrint: string;\n  /**\n   * The Bearer token\n   */\n  token: string;\n}\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {string}\n   */\n  private readonly expiration: string;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {ConfigService} configService configuration service\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on IProfile payload\n   * @param {Profile} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  async createToken({\n    id,\n    username,\n    name,\n    email,\n  }: Profile): Promise {\n    return {\n      expires: this.expiration,\n      expiresPrettyPrint: AuthService.prettyPrintSeconds(this.expiration),\n      token: this.jwtService.sign({\n        id,\n        username,\n        name,\n        email,\n      }),\n    };\n  }\n\n  /**\n   * Formats the time in seconds into human-readable format\n   * @param {string} time\n   * @returns {string} hrf time\n   */\n  private static prettyPrintSeconds(time: string): string {\n    const ntime = Number(time);\n    const hours = Math.floor(ntime / 3600);\n    const minutes = Math.floor((ntime % 3600) / 60);\n    const seconds = Math.floor((ntime % 3600) % 60);\n\n    return `${hours > 0 ? hours + (hours === 1 ? ' hour,' : ' hours,') : ''} ${\n      minutes > 0 ? minutes + (minutes === 1 ? ' minute' : ' minutes') : ''\n    } ${seconds > 0 ? seconds + (seconds === 1 ? ' second' : ' seconds') : ''}`;\n  }\n\n  /**\n   * Validates whether or not the profile exists in the database\n   * @param {LoginPayload} param login payload to authenticate with\n   * @returns {Promise} registered profile\n   */\n  async validateUser({ username, password }: LoginPayload): Promise {\n    const user = await this.profileService.getByUsernameAndPass(\n      username,\n      password,\n    );\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/config/config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\n\n@Module({\n  providers: [\n    {\n      provide: ConfigService,\n      useValue: new ConfigService('.env'),\n    },\n  ],\n  exports: [ConfigService],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/config/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Config Service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                envConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                isEnv\n                            \n                            \n                                    Private\n                                    Static\n                                validateInput\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filePath: string)\n                    \n                \n                        \n                            \n                                Defined in src/modules/config/config.service.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        envConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EnvConfig\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/config/config.service.ts:19\n                        \n                    \n\n            \n                \n                    Object that will contain the injected environment variables\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:78\n                \n            \n\n\n            \n                \n                    Fetches the key from the configuration file\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the associated value for a given key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnv\n                        \n                    \n                \n            \n            \n                \nisEnv(env: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:87\n                \n            \n\n\n            \n                \n                    Checks whether the application environment set in the configuration file matches the environment parameter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    env\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Whether or not the environment variable matches the application environment\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        validateInput\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateInput(envConfig: EnvConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:36\n                \n            \n\n\n            \n                \n                    Ensures all needed variables are set, and returns the validated JavaScript object\nincluding the applied default values.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    envConfig\n                                    \n                                                EnvConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the configuration object with variables from the configuration file\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EnvConfig\n\n                    \n                    \n                        a validated environment configuration object\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { parse } from 'dotenv';\nimport * as joi from '@hapi/joi';\nimport * as fs from 'fs';\n\n/**\n * Key-value mapping\n */\nexport interface EnvConfig {\n  [key: string]: string;\n}\n\n/**\n * Config Service\n */\nexport class ConfigService {\n  /**\n   * Object that will contain the injected environment variables\n   */\n  private readonly envConfig: EnvConfig;\n\n  /**\n   * Constructor\n   * @param {string} filePath\n   */\n  constructor(filePath: string) {\n    const config = parse(fs.readFileSync(filePath));\n    this.envConfig = ConfigService.validateInput(config);\n  }\n\n  /**\n   * Ensures all needed variables are set, and returns the validated JavaScript object\n   * including the applied default values.\n   * @param {EnvConfig} envConfig the configuration object with variables from the configuration file\n   * @returns {EnvConfig} a validated environment configuration object\n   */\n  private static validateInput(envConfig: EnvConfig): EnvConfig {\n    /**\n     * A schema to validate envConfig against\n     */\n    const envVarsSchema: joi.ObjectSchema = joi.object({\n      APP_ENV: joi\n        .string()\n        .valid('dev', 'prod')\n        .required(),\n      APP_URL: joi.string().uri({\n        scheme: [/https?/],\n      }),\n      WEBTOKEN_SECRET_KEY: joi.string().required(),\n      WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n      DB_TYPE: joi.string().default('mariadb'),\n      DB_USERNAME: joi.string().default('root'),\n      DB_PASSWORD: joi\n        .string()\n        .allow('')\n        .default(''),\n      DB_HOST: joi.string().default('localhost'),\n      DB_PORT: joi.number().default('8889'),\n      DB_DATABASE: joi.string().default('nest'),\n    });\n\n    /**\n     * Represents the status of validation check on the configuration file\n     */\n    const { error, value: validatedEnvConfig } = envVarsSchema.validate(\n      envConfig,\n    );\n    if (error) {\n      throw new Error(`Config validation error: ${error.message}`);\n    }\n    return validatedEnvConfig;\n  }\n\n  /**\n   * Fetches the key from the configuration file\n   * @param {string} key\n   * @returns {string} the associated value for a given key\n   */\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n\n  /**\n   * Checks whether the application environment set in the configuration file matches the environment parameter\n   * @param {string} env\n   * @returns {boolean} Whether or not the environment variable matches the application environment\n   */\n  isEnv(env: string): boolean {\n    return this.envConfig.APP_ENV === env;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EnvConfig.html":{"url":"interfaces/EnvConfig.html","title":"interface - EnvConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EnvConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/config/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Key-value mapping\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in src/modules/config/config.service.ts:8\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { parse } from 'dotenv';\nimport * as joi from '@hapi/joi';\nimport * as fs from 'fs';\n\n/**\n * Key-value mapping\n */\nexport interface EnvConfig {\n  [key: string]: string;\n}\n\n/**\n * Config Service\n */\nexport class ConfigService {\n  /**\n   * Object that will contain the injected environment variables\n   */\n  private readonly envConfig: EnvConfig;\n\n  /**\n   * Constructor\n   * @param {string} filePath\n   */\n  constructor(filePath: string) {\n    const config = parse(fs.readFileSync(filePath));\n    this.envConfig = ConfigService.validateInput(config);\n  }\n\n  /**\n   * Ensures all needed variables are set, and returns the validated JavaScript object\n   * including the applied default values.\n   * @param {EnvConfig} envConfig the configuration object with variables from the configuration file\n   * @returns {EnvConfig} a validated environment configuration object\n   */\n  private static validateInput(envConfig: EnvConfig): EnvConfig {\n    /**\n     * A schema to validate envConfig against\n     */\n    const envVarsSchema: joi.ObjectSchema = joi.object({\n      APP_ENV: joi\n        .string()\n        .valid('dev', 'prod')\n        .required(),\n      APP_URL: joi.string().uri({\n        scheme: [/https?/],\n      }),\n      WEBTOKEN_SECRET_KEY: joi.string().required(),\n      WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n      DB_TYPE: joi.string().default('mariadb'),\n      DB_USERNAME: joi.string().default('root'),\n      DB_PASSWORD: joi\n        .string()\n        .allow('')\n        .default(''),\n      DB_HOST: joi.string().default('localhost'),\n      DB_PORT: joi.number().default('8889'),\n      DB_DATABASE: joi.string().default('nest'),\n    });\n\n    /**\n     * Represents the status of validation check on the configuration file\n     */\n    const { error, value: validatedEnvConfig } = envVarsSchema.validate(\n      envConfig,\n    );\n    if (error) {\n      throw new Error(`Config validation error: ${error.message}`);\n    }\n    return validatedEnvConfig;\n  }\n\n  /**\n   * Fetches the key from the configuration file\n   * @param {string} key\n   * @returns {string} the associated value for a given key\n   */\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n\n  /**\n   * Checks whether the application environment set in the configuration file matches the environment parameter\n   * @param {string} env\n   * @returns {boolean} Whether or not the environment variable matches the application environment\n   */\n  isEnv(env: string): boolean {\n    return this.envConfig.APP_ENV === env;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGenericMessageBody.html":{"url":"interfaces/IGenericMessageBody.html","title":"interface - IGenericMessageBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGenericMessageBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Models a typical response for a crud operation\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Status message to return\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Profile } from './profile.entity';\nimport { RegisterPayload } from '../auth/payload/register.payload';\nimport { Roles } from '../app/roles.entity';\nimport { PatchProfilePayload } from './payload/patch.profile.payload';\n\n/**\n * Models a typical response for a crud operation\n */\nexport interface IGenericMessageBody {\n  /**\n   * Status message to return\n   */\n  message: string;\n}\n\n/**\n * Profile Service\n */\n@Injectable()\nexport class ProfileService {\n  /**\n   * Constructor\n   * @param {Repository} profileRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(Profile)\n    private readonly profileRepository: Repository,\n    @InjectRepository(Roles)\n    private readonly rolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches profile from database by UUID\n   * @param {number} id\n   * @returns {Promise} data from queried profile\n   */\n  get(id: number): Promise {\n    return this.profileRepository.findOne(id, { relations: ['roles'] });\n  }\n\n  /**\n   * Fetches profile from database by username\n   * @param {string} username\n   * @returns {Promise} data from queried profile\n   */\n  getByUsername(username: string): Promise {\n    return this.profileRepository.findOne({ username });\n  }\n\n  /**\n   * Fetches profile by username and hashed password\n   * @param {string} username\n   * @param {string} password\n   * @returns {Promise} data from queried profile\n   */\n  getByUsernameAndPass(username: string, password: string): Promise {\n    return this.profileRepository\n      .createQueryBuilder('profiles')\n      .where('profiles.username = :username and profiles.password = :password')\n      .setParameter('username', username)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a profile with RegisterPayload fields\n   * @param {RegisterPayload} payload profile payload\n   * @returns {Promise} data from the created profile\n   */\n  async create(payload: RegisterPayload): Promise {\n    const profile = await this.getByUsername(payload.username);\n\n    if (profile) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // keep making default roles for every created profile, these roles are defined from AppRoles enum.\n    const roles: Roles[] = [new Roles()];\n    await this.rolesRepository.save(roles);\n    return this.profileRepository.save(\n      this.profileRepository.create({\n        ...payload,\n        roles,\n        avatar: url(payload.email, {\n          protocol: 'http',\n          s: '200',\n          r: 'pg',\n          d: '404',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit profile data\n   * @param {PatchProfilePayload} payload\n   * @returns {Promise} mutated profile data\n   */\n  async edit(payload: PatchProfilePayload): Promise {\n    const { username } = payload;\n    const profile = await this.getByUsername(username);\n    if (profile) {\n      Object.keys(payload).forEach(key => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        profile[key] = payload[key];\n      });\n      return this.profileRepository.save(profile);\n    } else {\n      throw new BadRequestException(\n        'The profile with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Delete profile given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the delete operation was completed\n   */\n  async delete(username: string): Promise {\n    const deleted = await this.profileRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a profile by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITokenReturnBody.html":{"url":"interfaces/ITokenReturnBody.html","title":"interface - ITokenReturnBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ITokenReturnBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Models a typical Login/Register route return body\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            expires\n                                        \n                                \n                                \n                                        \n                                            expiresPrettyPrint\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expires\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expires:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    When the token is to expire in seconds\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresPrettyPrint\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresPrettyPrint:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A human-readable format of expires\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Bearer token\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ProfileService } from '../profile/profile.service';\nimport { ConfigService } from '../config/config.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { Profile } from '../profile/profile.entity';\nimport { LoginPayload } from './payload/login.payload';\n\n/**\n * Models a typical Login/Register route return body\n */\nexport interface ITokenReturnBody {\n  /**\n   * When the token is to expire in seconds\n   */\n  expires: string;\n  /**\n   * A human-readable format of expires\n   */\n  expiresPrettyPrint: string;\n  /**\n   * The Bearer token\n   */\n  token: string;\n}\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {string}\n   */\n  private readonly expiration: string;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {ConfigService} configService configuration service\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on IProfile payload\n   * @param {Profile} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  async createToken({\n    id,\n    username,\n    name,\n    email,\n  }: Profile): Promise {\n    return {\n      expires: this.expiration,\n      expiresPrettyPrint: AuthService.prettyPrintSeconds(this.expiration),\n      token: this.jwtService.sign({\n        id,\n        username,\n        name,\n        email,\n      }),\n    };\n  }\n\n  /**\n   * Formats the time in seconds into human-readable format\n   * @param {string} time\n   * @returns {string} hrf time\n   */\n  private static prettyPrintSeconds(time: string): string {\n    const ntime = Number(time);\n    const hours = Math.floor(ntime / 3600);\n    const minutes = Math.floor((ntime % 3600) / 60);\n    const seconds = Math.floor((ntime % 3600) % 60);\n\n    return `${hours > 0 ? hours + (hours === 1 ? ' hour,' : ' hours,') : ''} ${\n      minutes > 0 ? minutes + (minutes === 1 ? ' minute' : ' minutes') : ''\n    } ${seconds > 0 ? seconds + (seconds === 1 ? ' second' : ' seconds') : ''}`;\n  }\n\n  /**\n   * Validates whether or not the profile exists in the database\n   * @param {LoginPayload} param login payload to authenticate with\n   * @returns {Promise} registered profile\n   */\n  async validateUser({ username, password }: LoginPayload): Promise {\n    const user = await this.profileService.getByUsernameAndPass(\n      username,\n      password,\n    );\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, profileService: ProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        ProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/jwt.strategy.ts:34\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        a object to be signed\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\n\nimport { ConfigService } from '../config/config.service';\nimport { ProfileService } from '../profile/profile.service';\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {ProfileService} profileService\n   */\n  constructor(\n    readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('WEBTOKEN_SECRET_KEY'),\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {any} jwtPayload validation method for jwt token\n   * @returns {Promise} a object to be signed\n   */\n  async validate({ iat, exp, id }: any): Promise {\n    const timeDiff = exp - iat;\n    if (timeDiff  role.role) };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginPayload.html":{"url":"classes/LoginPayload.html","title":"class - LoginPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/payload/login.payload.ts\n        \n\n\n            \n                Description\n            \n            \n                Login Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/payload/login.payload.ts:26\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/payload/login.payload.ts:16\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsAlphanumeric, IsNotEmpty, MinLength } from 'class-validator';\n\n/**\n * Login Payload Class\n */\nexport class LoginPayload {\n  /**\n   * Username field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordTransformer.html":{"url":"classes/PasswordTransformer.html","title":"class - PasswordTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/password.transformer.ts\n        \n\n\n            \n                Description\n            \n            \n                Password Transformer Class\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n            \n                \nfrom(value)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/password.transformer.ts:20\n                \n            \n\n\n            \n                \n                    Grabs the string to hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        value to return\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n            \n                \nto(value)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/password.transformer.ts:12\n                \n            \n\n\n            \n                \n                    Value to transform to\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { ValueTransformer } from 'typeorm';\n\n/**\n * Password Transformer Class\n */\nexport class PasswordTransformer implements ValueTransformer {\n  /**\n   * Value to transform to\n   * @param value string to hash\n   */\n  to(value) {\n    return crypto.createHmac('sha256', value).digest('hex');\n  }\n\n  /**\n   * Grabs the string to hash\n   * @param value value to return\n   */\n  from(value) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchProfilePayload.html":{"url":"classes/PatchProfilePayload.html","title":"class - PatchProfilePayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchProfilePayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/payload/patch.profile.payload.ts\n        \n\n\n            \n                Description\n            \n            \n                Patch Profile Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/payload/patch.profile.payload.ts:20\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/payload/patch.profile.payload.ts:38\n                        \n                    \n\n            \n                \n                    Name field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/payload/patch.profile.payload.ts:46\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/payload/patch.profile.payload.ts:30\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  IsAlphanumeric,\n  Matches,\n} from 'class-validator';\n\n/**\n * Patch Profile Payload Class\n */\nexport class PatchProfilePayload {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiProperty()\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Profile Entity Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/profile.entity.ts:41\n                        \n                    \n\n            \n                \n                    Avatar column (gravatar url)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/profile.entity.ts:35\n                        \n                    \n\n            \n                \n                    Email column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/profile.entity.ts:17\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/profile.entity.ts:29\n                        \n                    \n\n            \n                \n                    Name column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'password', length: 255, transformer: undefined})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/profile.entity.ts:58\n                        \n                    \n\n            \n                \n                    Column that employs the PasswordTransformer to hash passwords before writing to database\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/profile.entity.ts:47\n                        \n                    \n\n            \n                \n                    Column to represent a one to many relationship with the roles entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/profile.entity.ts:23\n                        \n                    \n\n            \n                \n                    Username column\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport { PasswordTransformer } from './password.transformer';\nimport { Roles } from '../app/roles.entity';\n\n/**\n * Profile Entity Class\n */\n@Entity({\n  name: 'profiles',\n})\nexport class Profile {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Username column\n   */\n  @Column({ unique: true })\n  username: string;\n\n  /**\n   * Name column\n   */\n  @Column()\n  name: string;\n\n  /**\n   * Email column\n   */\n  @Column()\n  email: string;\n\n  /**\n   * Avatar column (gravatar url)\n   */\n  @Column()\n  avatar: string;\n\n  /**\n   * Column to represent a one to many relationship with the roles entity\n   */\n  @OneToMany(type => Roles, role => role.profile)\n  roles: Roles[];\n\n  /**\n   * Column that employs the PasswordTransformer to hash passwords before writing to database\n   */\n  @Column({\n    name: 'password',\n    length: 255,\n    transformer: new PasswordTransformer(),\n  })\n  @Exclude()\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/profile\n            \n\n\n            \n                Description\n            \n            \n                Profile Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                patchProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username')@UseGuards(undefined, ACGuard)@UseRoles({resource: 'profiles', action: 'delete', possession: 'any'})@ApiResponse({status: 200, description: 'Delete Profile Request Received'})@ApiResponse({status: 400, description: 'Delete Profile Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:82\n                \n            \n\n\n            \n                \n                    Removes a profile from the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        whether or not the profile has been deleted\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@UseGuards(undefined)@ApiResponse({status: 200, description: 'Fetch Profile Request Received'})@ApiResponse({status: 400, description: 'Fetch Profile Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:40\n                \n            \n\n\n            \n                \n                    Retrieves a particular profile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the profile given username to fetch\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patchProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    patchProfile(payload: PatchProfilePayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@UseGuards(undefined)@UseRoles({resource: 'profiles', action: 'update', possession: 'any'})@ApiResponse({status: 200, description: 'Patch Profile Request Received'})@ApiResponse({status: 400, description: 'Patch Profile Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:64\n                \n            \n\n\n            \n                \n                    Edit a profile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchProfilePayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated profile data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ACGuard, UseRoles } from 'nest-access-control';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { ProfileService, IGenericMessageBody } from './profile.service';\nimport { PatchProfilePayload } from './payload/patch.profile.payload';\nimport { Profile } from './profile.entity';\n\n/**\n * Profile Controller\n */\n@ApiBearerAuth()\n@ApiTags('profile')\n@Controller('api/profile')\nexport class ProfileController {\n  /**\n   * Constructor\n   * @param profileService\n   */\n  constructor(private readonly profileService: ProfileService) {}\n\n  /**\n   * Retrieves a particular profile\n   * @param username the profile given username to fetch\n   * @returns {Promise} queried profile data\n   */\n  @Get(':username')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiResponse({ status: 200, description: 'Fetch Profile Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch Profile Request Failed' })\n  async getProfile(@Param('username') username: string): Promise {\n    const profile = await this.profileService.getByUsername(username);\n    if (!profile) {\n      throw new BadRequestException(\n        'The profile with that username could not be found.',\n      );\n    }\n    return profile;\n  }\n\n  /**\n   * Edit a profile\n   * @param {RegisterPayload} payload\n   * @returns {Promise} mutated profile data\n   */\n  @Patch()\n  @UseGuards(AuthGuard('jwt'))\n  @UseRoles({\n    resource: 'profiles',\n    action: 'update',\n    possession: 'any',\n  })\n  @ApiResponse({ status: 200, description: 'Patch Profile Request Received' })\n  @ApiResponse({ status: 400, description: 'Patch Profile Request Failed' })\n  async patchProfile(@Body() payload: PatchProfilePayload): Promise {\n    return await this.profileService.edit(payload);\n  }\n\n  /**\n   * Removes a profile from the database\n   * @param {string} username the username to remove\n   * @returns {Promise} whether or not the profile has been deleted\n   */\n  @Delete(':username')\n  @UseGuards(AuthGuard('jwt'), ACGuard)\n  @UseRoles({\n    resource: 'profiles',\n    action: 'delete',\n    possession: 'any',\n  })\n  @ApiResponse({ status: 200, description: 'Delete Profile Request Received' })\n  @ApiResponse({ status: 400, description: 'Delete Profile Request Failed' })\n  async delete(\n    @Param('username') username: string,\n  ): Promise {\n    return await this.profileService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_ProfileModule_exports\n\n\n\n\nProfileService \n\nProfileService \n\n\n\nProfileModule\n\nProfileModule\n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProfileService } from './profile.service';\nimport { Profile } from './profile.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Roles } from '../app/roles.entity';\nimport { ProfileController } from './profile.controller';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Profile, Roles])],\n  providers: [ProfileService],\n  exports: [ProfileService],\n  controllers: [ProfileController],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Profile Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                edit\n                            \n                            \n                                get\n                            \n                            \n                                getByUsername\n                            \n                            \n                                getByUsernameAndPass\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profileRepository: Repository, rolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/profile/profile.service.ts:30\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        profileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: RegisterPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:84\n                \n            \n\n\n            \n                \n                    Create a profile with RegisterPayload fields\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        profile payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from the created profile\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:138\n                \n            \n\n\n            \n                \n                    Delete profile given a username\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        whether or not the delete operation was completed\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        edit\n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(payload: PatchProfilePayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:115\n                \n            \n\n\n            \n                \n                    Edit profile data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchProfilePayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:48\n                \n            \n\n\n            \n                \n                    Fetches profile from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried profile\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsername\n                        \n                    \n                \n            \n            \n                \ngetByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:57\n                \n            \n\n\n            \n                \n                    Fetches profile from database by username\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried profile\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsernameAndPass\n                        \n                    \n                \n            \n            \n                \ngetByUsernameAndPass(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:67\n                \n            \n\n\n            \n                \n                    Fetches profile by username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried profile\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Profile } from './profile.entity';\nimport { RegisterPayload } from '../auth/payload/register.payload';\nimport { Roles } from '../app/roles.entity';\nimport { PatchProfilePayload } from './payload/patch.profile.payload';\n\n/**\n * Models a typical response for a crud operation\n */\nexport interface IGenericMessageBody {\n  /**\n   * Status message to return\n   */\n  message: string;\n}\n\n/**\n * Profile Service\n */\n@Injectable()\nexport class ProfileService {\n  /**\n   * Constructor\n   * @param {Repository} profileRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(Profile)\n    private readonly profileRepository: Repository,\n    @InjectRepository(Roles)\n    private readonly rolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches profile from database by UUID\n   * @param {number} id\n   * @returns {Promise} data from queried profile\n   */\n  get(id: number): Promise {\n    return this.profileRepository.findOne(id, { relations: ['roles'] });\n  }\n\n  /**\n   * Fetches profile from database by username\n   * @param {string} username\n   * @returns {Promise} data from queried profile\n   */\n  getByUsername(username: string): Promise {\n    return this.profileRepository.findOne({ username });\n  }\n\n  /**\n   * Fetches profile by username and hashed password\n   * @param {string} username\n   * @param {string} password\n   * @returns {Promise} data from queried profile\n   */\n  getByUsernameAndPass(username: string, password: string): Promise {\n    return this.profileRepository\n      .createQueryBuilder('profiles')\n      .where('profiles.username = :username and profiles.password = :password')\n      .setParameter('username', username)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a profile with RegisterPayload fields\n   * @param {RegisterPayload} payload profile payload\n   * @returns {Promise} data from the created profile\n   */\n  async create(payload: RegisterPayload): Promise {\n    const profile = await this.getByUsername(payload.username);\n\n    if (profile) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // keep making default roles for every created profile, these roles are defined from AppRoles enum.\n    const roles: Roles[] = [new Roles()];\n    await this.rolesRepository.save(roles);\n    return this.profileRepository.save(\n      this.profileRepository.create({\n        ...payload,\n        roles,\n        avatar: url(payload.email, {\n          protocol: 'http',\n          s: '200',\n          r: 'pg',\n          d: '404',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit profile data\n   * @param {PatchProfilePayload} payload\n   * @returns {Promise} mutated profile data\n   */\n  async edit(payload: PatchProfilePayload): Promise {\n    const { username } = payload;\n    const profile = await this.getByUsername(username);\n    if (profile) {\n      Object.keys(payload).forEach(key => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        profile[key] = payload[key];\n      });\n      return this.profileRepository.save(profile);\n    } else {\n      throw new BadRequestException(\n        'The profile with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Delete profile given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the delete operation was completed\n   */\n  async delete(username: string): Promise {\n    const deleted = await this.profileRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a profile by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterPayload.html":{"url":"classes/RegisterPayload.html","title":"class - RegisterPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/payload/register.payload.ts\n        \n\n\n            \n                Description\n            \n            \n                Register Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/payload/register.payload.ts:22\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/payload/register.payload.ts:42\n                        \n                    \n\n            \n                \n                    Name field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/payload/register.payload.ts:52\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/payload/register.payload.ts:32\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  IsAlphanumeric,\n  Matches,\n} from 'class-validator';\n\n/**\n * Register Payload Class\n */\nexport class RegisterPayload {\n  /**\n   * Email field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Roles.html":{"url":"classes/Roles.html","title":"class - Roles","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Roles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/roles.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Roles Entity Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                profile\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/app/roles.entity.ts:14\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Profile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/app/roles.entity.ts:31\n                        \n                    \n\n            \n                \n                    Column to represent a many to one relationship with the profile entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppRoles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: AppRoles, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/app/roles.entity.ts:25\n                        \n                    \n\n            \n                \n                    Column for role based access\nBeware this default app role will permit every created profile to delete other profiles\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { AppRoles } from './app.roles';\nimport { Profile } from '../profile/profile.entity';\n\n/**\n * Roles Entity Class\n */\n@Entity()\nexport class Roles {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Column for role based access\n   * Beware this default app role will permit every created profile to delete other profiles\n   */\n  @Column({\n    type: 'enum',\n    enum: AppRoles,\n    default: AppRoles.ADMIN,\n  })\n  role: AppRoles;\n\n  /**\n   * Column to represent a many to one relationship with the profile entity\n   */\n  @ManyToOne(type => Profile, profile => profile.roles, { onDelete: 'CASCADE' })\n  profile: Profile;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WinstonModule.html":{"url":"modules/WinstonModule.html","title":"module - WinstonModule","body":"\n                   \n\n\n\n\n    Modules\n    WinstonModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/winston/winston.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: WinstonModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/winston/winston.module.ts:21\n                \n            \n\n\n            \n                \n                    Constructor for winson module\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                WinstonModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: WinstonModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/winston/winston.module.ts:35\n                \n            \n\n\n            \n                \n                    Asynchronous constructor for winston module\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                WinstonModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Global, Module } from '@nestjs/common';\nimport {\n  WinstonModuleAsyncOptions,\n  WinstonModuleOptions,\n} from './winston.interfaces';\nimport {\n  createWinstonAsyncProviders,\n  createWinstonProviders,\n} from './winston.providers';\n\n@Global()\n@Module({})\n/**\n * Represents a Winston Module\n */\nexport class WinstonModule {\n  /**\n   * Constructor for winson module\n   * @param options\n   */\n  public static forRoot(options: WinstonModuleOptions): DynamicModule {\n    const providers = createWinstonProviders(options);\n\n    return {\n      module: WinstonModule,\n      providers,\n      exports: providers,\n    };\n  }\n\n  /**\n   * Asynchronous constructor for winston module\n   * @param options\n   */\n  public static forRootAsync(\n    options: WinstonModuleAsyncOptions,\n  ): DynamicModule {\n    const providers = createWinstonAsyncProviders(options);\n\n    return {\n      module: WinstonModule,\n      imports: options.imports,\n      providers,\n      exports: providers,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WinstonModuleAsyncOptions.html":{"url":"interfaces/WinstonModuleAsyncOptions.html","title":"interface - WinstonModuleAsyncOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WinstonModuleAsyncOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/winston/winston.interfaces.ts\n        \n\n\n            \n                Description\n            \n            \n                Asynchronous winston module options\n\n            \n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            inject\n                                        \n                                \n                                \n                                        \n                                            useFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Providers to inject\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Default factory method that returns winston module options\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ModuleMetadata } from '@nestjs/common/interfaces';\nimport { LoggerOptions } from 'winston';\n\n/**\n * Logger options\n */\nexport type WinstonModuleOptions = LoggerOptions;\n\n/**\n * Asynchronous winston module options\n */\nexport interface WinstonModuleAsyncOptions\n  extends Pick {\n  /**\n   * Default factory method that returns winston module options\n   */\n  useFactory: (\n    ...args: any[]\n  ) => Promise | WinstonModuleOptions;\n\n  /**\n   * Providers to inject\n   */\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/main.ts\n            \n            variable\n            SWAGGER_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            SWAGGER_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            SWAGGER_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            SWAGGER_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/app/app.roles.ts\n            \n            variable\n            roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/app/roles.entity.ts\n            \n            class\n            Roles\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            interface\n            ITokenReturnBody\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/payload/login.payload.ts\n            \n            class\n            LoginPayload\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/payload/register.payload.ts\n            \n            class\n            RegisterPayload\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/config/config.service.ts\n            \n            class\n            ConfigService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/config/config.service.ts\n            \n            interface\n            EnvConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/profile/password.transformer.ts\n            \n            class\n            PasswordTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/profile/payload/patch.profile.payload.ts\n            \n            class\n            PatchProfilePayload\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.entity.ts\n            \n            class\n            Profile\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.service.ts\n            \n            interface\n            IGenericMessageBody\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.constants.ts\n            \n            variable\n            WINSTON_MODULE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.constants.ts\n            \n            variable\n            WINSTON_MODULE_PROVIDER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.interfaces.ts\n            \n            interface\n            WinstonModuleAsyncOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.providers.ts\n            \n            variable\n            createWinstonAsyncProviders\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.providers.ts\n            \n            variable\n            createWinstonProviders\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : 17.1.1\n        \n            @nestjs/common : 8.0.4\n        \n            @nestjs/core : 8.0.4\n        \n            @nestjs/jwt : 8.0.0\n        \n            @nestjs/passport : 8.0.0\n        \n            @nestjs/platform-express : 8.0.4\n        \n            @nestjs/platform-fastify : 8.0.4\n        \n            @nestjs/swagger : 5.0.4\n        \n            @nestjs/typeorm : 8.0.1\n        \n            class-transformer : 0.4.0\n        \n            class-validator : 0.13.1\n        \n            crypto : 1.0.1\n        \n            dotenv : 10.0.0\n        \n            express-rate-limit : 5.3.0\n        \n            fastify-helmet : 5.3.2\n        \n            fastify-rate-limit : 5.5.0\n        \n            fastify-swagger : 4.8.3\n        \n            gravatar : 1.8.1\n        \n            helmet : 4.6.0\n        \n            mysql : 2.18.1\n        \n            nest-access-control : 2.0.2\n        \n            passport : 0.4.1\n        \n            passport-jwt : 4.0.0\n        \n            reflect-metadata : 0.1.13\n        \n            rimraf : 3.0.2\n        \n            rxjs : 7.2.0\n        \n            swagger-ui-express : 4.1.6\n        \n            typeorm : 0.2.34\n        \n            winston : 3.3.3\n        \n            winston-daily-rotate-file : 4.5.5\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppRoles   (src/.../app.roles.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/app/app.roles.ts\n    \n        \n            \n                \n                    \n                        \n                        AppRoles\n                    \n                \n                        \n                            \n                                 DEFAULT\n                            \n                        \n                        \n                            \n                                Value : DEFAULT\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nA progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n\n\n    \n    \n    \n    \n    \n\n\n📚 Description\nThis boilerplate is made to quickly prototype backend applications. It comes with authentication, logging, security, and database features out of the box.\n\n🛠️ Prerequisites\nNon Docker\n\nPlease make sure to have MYSQL locally by utilizing a web server stack XAMPP. The control panel can then trigger MYSQL to start on localhost. MYSQL can be downloaded independently using brew, choco, or apt-get.  \n\nDocker 🐳\n\nPlease make sure to have docker desktop setup on any preferred operating system to quickly compose the required dependencies. Then follow the docker procedure outlined below.\n\nNote: Docker Desktop comes free on both Mac and Windows, but it only works with Windows 10 Pro. A workaround is to get Docker Toolbox which will bypass the Windows 10 Pro prerequisite by executing in a VM.\n\n🚀 Deployment\nManual Deployment without Docker\n\nCreate a .env file using the cp .env.example .env command and replace the existing environment variables with personal configuration settings (username and password database).\n\nDownload dependencies using npm i or yarn\n\nStart the app in pre-production mode by using npm run start or npm run start:dev for development (the app will be exposed on the port 9000; not to conflict with React, Angular, or Vue)\n\n\nDeploying with Docker 🐳\n\nExecute the following command in-app directory:\n\n# creates and loads the docker container in detached mode with the required configuration\n$ docker-compose up -d\nThe following command will set up and run the docker project for quick use. Then the web application, Nginx, and MYSQL will be exposed to http://localhost:9000, http://localhost:80, and http://localhost:3306 respectively.\n\n🔒 Environment Configuration\nBy default, the application comes with a config module that can read in every environment variable from the .env file.\nAPP_ENV  - the application environment to execute as, either in development or production. Determines the type of logging options to utilize. Options:  dev  or  prod.\nAPP_URL  - the base URL for the application. Made mainly to showcase the power of  ConfigService  and can be removed as it doesn't serve any other purpose\nWEBTOKEN_SECRET_KEY  - the secret key to encrypt/decrypt web tokens with. Make sure to generate a random alphanumeric string for this.\nWEBTOKEN_EXPIRATION_TIME  -  the time in seconds  indicating when the web token will expire; by default, it's 2400 seconds which is 40 mins.\nDB_TYPE - the type of database connection to use.\nDB_USERNAME - username for authenticating against the database.\nDB_PASSWORD - password for authenticating against the database, can be left empty if a password is not needed (not recommended).\nDB_HOST - the endpoint where this database sits (usually localhost but can be a static address).\nDB_PORT - default ports for different types of database connections.\nDB_DATABASE - the actual database name to perform operations on.\n\n🏗 Choosing a Web Framework\nThis boilerplate comes with Fastify out of the box as it offers performance benefits over Express. But this can be changed to use Express framework instead of Fastify. Please proceed with the steps below to change between the two.\n\nReplace the following lines of code in the main.ts file with the ones detailed below.\n\nFastify:\n// to fastify:\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport * as headers from 'fastify-helmet';\nimport * as fastifyRateLimiter from 'fastify-rate-limit';\nconst app = await NestFactory.create(\n  AppModule,\n  new FastifyAdapter({ logger: console }),\n);\napp.register(headers);\napp.register(fastifyRateLimiter, {\n  max: 100,\n  timeWindow: '1 minute',\n});Express:\n// to express:\nimport * as headers from 'helmet';\nimport * as rateLimiter from 'express-rate-limit';\nconst app = await NestFactory.create(AppModule, {\n  logger: console,\n});\napp.use(headers());\napp.use(\n  rateLimiter({\n    windowMs: 60, // 1 minutes\n    max: 100, // limit each IP to 100 requests per windowMs\n  }),\n);Note: The boilerplate comes with production dependencies for both Express and Fastify to support moving between two. But this is going to leave it bloated especially when only one web framework is used at a time. Thus, it is recommended that when deploying to production, unused dependencies are purged.\nIf you choose to use Fastify, this command will purge all of the Express dependencies:\n# removing Express dependencies\n$ npm rm @nestjs/platform-express express-rate-limit helmet swagger-ui-express @types/express --saveIf you choose to use Express, this command will purge all of the Fastify dependencies:\n# removing Fastify dependencies\n$ npm rm @nestjs/platform-fastify fastify-helmet fastify-rate-limit fastify-swagger --save\n💾 Choosing a Database\nBy default MYSQL/MariaDB are the database of choice but TypeORM supports other database types like SQLite, Postgres, MongoDB, and MSSQL. To use anything other than MYSQL/MariaDB, change the configuration in the .env file, and download the corresponding wrapper library, like SQLite3 if necessary. Of course that is assuming a proper \nsetup of the database has been completed on a local machine.\nNote: For MongoDB, TypeORM is not as feature-rich as Mongoose. Therefore I created another boilerplate only for Nest and Mongoose.\n\n✅ Testing\nDocker 🐳\n# unit tests\n$ docker exec -it nest yarn test\n\n# e2e tests\n$ docker exec -it nest yarn test:e2e\n\n# test coverage\n$ docker exec -it nest yarn test:covNon-Docker\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n💡 TypeDocs\nThe documentation for this boilerplate can be found on Github pages.\nThe docs can be generated on-demand, simply, by typing npm run typedocs. This will produce a docs folder with the required front-end files and start hosting on  localhost.\n# generate docs for code\n$ npm run typedocs\n📝 Open API\nOut of the box, the web app comes with Swagger; an  open api specification, that is used to describe RESTful APIs. Nest provides a  dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is an object-relational mapping that acts as an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n🔊 Logs\nThis boilerplate comes with a Winston module for logging, the configurations for Winston can be found in the app module.\n\nProgress\n\n\n\nBranches\nStatus\n\n\n\n\nMaster\n✅\n\n\nRXJS\n🚧\n\n\n\n\n👥 Support\nPR are appreciated, I fully rely on the goodness ❤️ of the people.\nNest is an MIT-licensed open source project with its ongoing development made possible thanks to the support by the community. This framework is a result of the long road, full of sleepless nights, working after hours, and busy weekends.\n\nLicense\nNest is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WinstonModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAuthModule -->\n\nProfileModule->AuthModule\n\n\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nProfileService \n\nProfileService \n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nWinstonModule\n\nWinstonModule\n\nAppModule -->\n\nWinstonModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            WinstonModuleOptions   (src/.../winston.interfaces.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/winston/winston.interfaces.ts\n    \n    \n        \n            \n                \n                    \n                    WinstonModuleOptions\n                \n            \n            \n                \n                    Logger options\n\n                \n            \n            \n                \n                        LoggerOptions\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            createWinstonAsyncProviders   (src/.../winston.providers.ts)\n                        \n                        \n                            createWinstonProviders   (src/.../winston.providers.ts)\n                        \n                        \n                            roles   (src/.../app.roles.ts)\n                        \n                        \n                            SWAGGER_API_CURRENT_VERSION   (src/.../main.ts)\n                        \n                        \n                            SWAGGER_API_DESCRIPTION   (src/.../main.ts)\n                        \n                        \n                            SWAGGER_API_NAME   (src/.../main.ts)\n                        \n                        \n                            SWAGGER_API_ROOT   (src/.../main.ts)\n                        \n                        \n                            WINSTON_MODULE_OPTIONS   (src/.../winston.constants.ts)\n                        \n                        \n                            WINSTON_MODULE_PROVIDER   (src/.../winston.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/winston/winston.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createWinstonAsyncProviders\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  options: WinstonModuleAsyncOptions,\n): Provider[] => {\n  return [\n    {\n      provide: WINSTON_MODULE_OPTIONS,\n      useFactory: options.useFactory,\n      inject: options.inject || [],\n    },\n    {\n      provide: WINSTON_MODULE_PROVIDER,\n      useFactory: (loggerOpts: LoggerOptions) => createLogger(loggerOpts),\n      inject: [WINSTON_MODULE_OPTIONS],\n    },\n  ];\n}\n                    \n                \n\n            \n                \n                    Async constructor for a winston provider\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createWinstonProviders\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  loggerOpts: WinstonModuleOptions,\n): Provider[] => {\n  return [\n    {\n      provide: WINSTON_MODULE_PROVIDER,\n      useFactory: () => createLogger(loggerOpts),\n    },\n  ];\n}\n                    \n                \n\n            \n                \n                    Constructor a winston provider\n\n                \n            \n\n        \n    \n\n    src/modules/app/app.roles.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RolesBuilder\n\n                    \n                \n                \n                    \n                        Default value : new RolesBuilder()\n                    \n                \n\n            \n                \n                    Roles Builder\n\n                \n            \n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SWAGGER_API_CURRENT_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0'\n                    \n                \n\n            \n                \n                    Current version of the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SWAGGER_API_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API Description'\n                    \n                \n\n            \n                \n                    A short description for api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SWAGGER_API_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API'\n                    \n                \n\n            \n                \n                    The name given to the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SWAGGER_API_ROOT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api/docs'\n                    \n                \n\n            \n                \n                    The endpoint for open api ui\n\n                \n            \n\n        \n    \n\n    src/modules/winston/winston.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WINSTON_MODULE_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'WinstonModuleOptions'\n                    \n                \n\n            \n                \n                    Token for the type of configuration to be used when declaring in app module\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        WINSTON_MODULE_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'winston'\n                    \n                \n\n            \n                \n                    An identifier for when injecting the winston provider\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
